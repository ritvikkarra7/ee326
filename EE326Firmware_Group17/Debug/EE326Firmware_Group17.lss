
EE326Firmware_Group17.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002680  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402680  00402680  00012680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000043c  20000000  00402688  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004bc  2000043c  00402ac4  0002043c  2**2
                  ALLOC
  4 .stack        00003000  200008f8  00402f80  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001078c  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000230b  00000000  00000000  00030c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005b94  00000000  00000000  00032f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a00  00000000  00000000  00038aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000968  00000000  00000000  000394ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004e6f  00000000  00000000  00039e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b446  00000000  00000000  0003ecc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004f30a  00000000  00000000  0004a107  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002d84  00000000  00000000  00099414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f8 38 00 20 ad 15 40 00 75 16 40 00 75 16 40 00     .8. ..@.u.@.u.@.
  400010:	75 16 40 00 75 16 40 00 75 16 40 00 00 00 00 00     u.@.u.@.u.@.....
	...
  40002c:	75 16 40 00 75 16 40 00 00 00 00 00 75 16 40 00     u.@.u.@.....u.@.
  40003c:	75 16 40 00 75 16 40 00 75 16 40 00 75 16 40 00     u.@.u.@.u.@.u.@.
  40004c:	75 16 40 00 75 16 40 00 75 16 40 00 75 16 40 00     u.@.u.@.u.@.u.@.
  40005c:	00 00 00 00 75 16 40 00 75 16 40 00 00 00 00 00     ....u.@.u.@.....
  40006c:	ad 02 40 00 c5 02 40 00 00 00 00 00 b5 12 40 00     ..@...@.......@.
  40007c:	75 16 40 00 00 00 00 00 00 00 00 00 75 16 40 00     u.@.........u.@.
  40008c:	75 16 40 00 75 16 40 00 75 16 40 00 75 16 40 00     u.@.u.@.u.@.u.@.
  40009c:	15 11 40 00 75 16 40 00 75 16 40 00 00 00 00 00     ..@.u.@.u.@.....
	...
  4000b4:	75 16 40 00 75 16 40 00 75 16 40 00 75 16 40 00     u.@.u.@.u.@.u.@.
  4000c4:	75 16 40 00 75 16 40 00                             u.@.u.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402688 	.word	0x00402688

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00402688 	.word	0x00402688
  40012c:	20000440 	.word	0x20000440
  400130:	00402688 	.word	0x00402688
  400134:	00000000 	.word	0x00000000

00400138 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400138:	b580      	push	{r7, lr}
  40013a:	b084      	sub	sp, #16
  40013c:	af00      	add	r7, sp, #0
  40013e:	6078      	str	r0, [r7, #4]
  400140:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400142:	6878      	ldr	r0, [r7, #4]
  400144:	4b2c      	ldr	r3, [pc, #176]	; (4001f8 <pio_handler_process+0xc0>)
  400146:	4798      	blx	r3
  400148:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40014a:	6878      	ldr	r0, [r7, #4]
  40014c:	4b2b      	ldr	r3, [pc, #172]	; (4001fc <pio_handler_process+0xc4>)
  40014e:	4798      	blx	r3
  400150:	4602      	mov	r2, r0
  400152:	68fb      	ldr	r3, [r7, #12]
  400154:	4013      	ands	r3, r2
  400156:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  400158:	68fb      	ldr	r3, [r7, #12]
  40015a:	2b00      	cmp	r3, #0
  40015c:	d03c      	beq.n	4001d8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40015e:	2300      	movs	r3, #0
  400160:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  400162:	e034      	b.n	4001ce <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400164:	4a26      	ldr	r2, [pc, #152]	; (400200 <pio_handler_process+0xc8>)
  400166:	68bb      	ldr	r3, [r7, #8]
  400168:	011b      	lsls	r3, r3, #4
  40016a:	4413      	add	r3, r2
  40016c:	681a      	ldr	r2, [r3, #0]
  40016e:	683b      	ldr	r3, [r7, #0]
  400170:	429a      	cmp	r2, r3
  400172:	d126      	bne.n	4001c2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400174:	4a22      	ldr	r2, [pc, #136]	; (400200 <pio_handler_process+0xc8>)
  400176:	68bb      	ldr	r3, [r7, #8]
  400178:	011b      	lsls	r3, r3, #4
  40017a:	4413      	add	r3, r2
  40017c:	3304      	adds	r3, #4
  40017e:	681a      	ldr	r2, [r3, #0]
  400180:	68fb      	ldr	r3, [r7, #12]
  400182:	4013      	ands	r3, r2
  400184:	2b00      	cmp	r3, #0
  400186:	d01c      	beq.n	4001c2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400188:	4a1d      	ldr	r2, [pc, #116]	; (400200 <pio_handler_process+0xc8>)
  40018a:	68bb      	ldr	r3, [r7, #8]
  40018c:	011b      	lsls	r3, r3, #4
  40018e:	4413      	add	r3, r2
  400190:	330c      	adds	r3, #12
  400192:	681b      	ldr	r3, [r3, #0]
  400194:	491a      	ldr	r1, [pc, #104]	; (400200 <pio_handler_process+0xc8>)
  400196:	68ba      	ldr	r2, [r7, #8]
  400198:	0112      	lsls	r2, r2, #4
  40019a:	440a      	add	r2, r1
  40019c:	6810      	ldr	r0, [r2, #0]
  40019e:	4918      	ldr	r1, [pc, #96]	; (400200 <pio_handler_process+0xc8>)
  4001a0:	68ba      	ldr	r2, [r7, #8]
  4001a2:	0112      	lsls	r2, r2, #4
  4001a4:	440a      	add	r2, r1
  4001a6:	3204      	adds	r2, #4
  4001a8:	6812      	ldr	r2, [r2, #0]
  4001aa:	4611      	mov	r1, r2
  4001ac:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4001ae:	4a14      	ldr	r2, [pc, #80]	; (400200 <pio_handler_process+0xc8>)
  4001b0:	68bb      	ldr	r3, [r7, #8]
  4001b2:	011b      	lsls	r3, r3, #4
  4001b4:	4413      	add	r3, r2
  4001b6:	3304      	adds	r3, #4
  4001b8:	681b      	ldr	r3, [r3, #0]
  4001ba:	43db      	mvns	r3, r3
  4001bc:	68fa      	ldr	r2, [r7, #12]
  4001be:	4013      	ands	r3, r2
  4001c0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4001c2:	68bb      	ldr	r3, [r7, #8]
  4001c4:	3301      	adds	r3, #1
  4001c6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001c8:	68bb      	ldr	r3, [r7, #8]
  4001ca:	2b06      	cmp	r3, #6
  4001cc:	d803      	bhi.n	4001d6 <pio_handler_process+0x9e>
		while (status != 0) {
  4001ce:	68fb      	ldr	r3, [r7, #12]
  4001d0:	2b00      	cmp	r3, #0
  4001d2:	d1c7      	bne.n	400164 <pio_handler_process+0x2c>
  4001d4:	e000      	b.n	4001d8 <pio_handler_process+0xa0>
				break;
  4001d6:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001d8:	4b0a      	ldr	r3, [pc, #40]	; (400204 <pio_handler_process+0xcc>)
  4001da:	681b      	ldr	r3, [r3, #0]
  4001dc:	2b00      	cmp	r3, #0
  4001de:	d007      	beq.n	4001f0 <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4001e0:	4b09      	ldr	r3, [pc, #36]	; (400208 <pio_handler_process+0xd0>)
  4001e2:	681b      	ldr	r3, [r3, #0]
  4001e4:	2b00      	cmp	r3, #0
  4001e6:	d003      	beq.n	4001f0 <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4001e8:	4b07      	ldr	r3, [pc, #28]	; (400208 <pio_handler_process+0xd0>)
  4001ea:	681b      	ldr	r3, [r3, #0]
  4001ec:	6878      	ldr	r0, [r7, #4]
  4001ee:	4798      	blx	r3
		}
	}
#endif
}
  4001f0:	bf00      	nop
  4001f2:	3710      	adds	r7, #16
  4001f4:	46bd      	mov	sp, r7
  4001f6:	bd80      	pop	{r7, pc}
  4001f8:	00400c2b 	.word	0x00400c2b
  4001fc:	00400c41 	.word	0x00400c41
  400200:	20000458 	.word	0x20000458
  400204:	200004e4 	.word	0x200004e4
  400208:	200004cc 	.word	0x200004cc

0040020c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40020c:	b580      	push	{r7, lr}
  40020e:	b086      	sub	sp, #24
  400210:	af00      	add	r7, sp, #0
  400212:	60f8      	str	r0, [r7, #12]
  400214:	60b9      	str	r1, [r7, #8]
  400216:	607a      	str	r2, [r7, #4]
  400218:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40021a:	4b21      	ldr	r3, [pc, #132]	; (4002a0 <pio_handler_set+0x94>)
  40021c:	681b      	ldr	r3, [r3, #0]
  40021e:	2b06      	cmp	r3, #6
  400220:	d901      	bls.n	400226 <pio_handler_set+0x1a>
		return 1;
  400222:	2301      	movs	r3, #1
  400224:	e038      	b.n	400298 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400226:	2300      	movs	r3, #0
  400228:	75fb      	strb	r3, [r7, #23]
  40022a:	e011      	b.n	400250 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  40022c:	7dfb      	ldrb	r3, [r7, #23]
  40022e:	011b      	lsls	r3, r3, #4
  400230:	4a1c      	ldr	r2, [pc, #112]	; (4002a4 <pio_handler_set+0x98>)
  400232:	4413      	add	r3, r2
  400234:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400236:	693b      	ldr	r3, [r7, #16]
  400238:	681a      	ldr	r2, [r3, #0]
  40023a:	68bb      	ldr	r3, [r7, #8]
  40023c:	429a      	cmp	r2, r3
  40023e:	d104      	bne.n	40024a <pio_handler_set+0x3e>
  400240:	693b      	ldr	r3, [r7, #16]
  400242:	685a      	ldr	r2, [r3, #4]
  400244:	687b      	ldr	r3, [r7, #4]
  400246:	429a      	cmp	r2, r3
  400248:	d008      	beq.n	40025c <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40024a:	7dfb      	ldrb	r3, [r7, #23]
  40024c:	3301      	adds	r3, #1
  40024e:	75fb      	strb	r3, [r7, #23]
  400250:	7dfa      	ldrb	r2, [r7, #23]
  400252:	4b13      	ldr	r3, [pc, #76]	; (4002a0 <pio_handler_set+0x94>)
  400254:	681b      	ldr	r3, [r3, #0]
  400256:	429a      	cmp	r2, r3
  400258:	d9e8      	bls.n	40022c <pio_handler_set+0x20>
  40025a:	e000      	b.n	40025e <pio_handler_set+0x52>
			break;
  40025c:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40025e:	693b      	ldr	r3, [r7, #16]
  400260:	68ba      	ldr	r2, [r7, #8]
  400262:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  400264:	693b      	ldr	r3, [r7, #16]
  400266:	687a      	ldr	r2, [r7, #4]
  400268:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40026a:	693b      	ldr	r3, [r7, #16]
  40026c:	683a      	ldr	r2, [r7, #0]
  40026e:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  400270:	693b      	ldr	r3, [r7, #16]
  400272:	6a3a      	ldr	r2, [r7, #32]
  400274:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  400276:	7dfa      	ldrb	r2, [r7, #23]
  400278:	4b09      	ldr	r3, [pc, #36]	; (4002a0 <pio_handler_set+0x94>)
  40027a:	681b      	ldr	r3, [r3, #0]
  40027c:	3301      	adds	r3, #1
  40027e:	429a      	cmp	r2, r3
  400280:	d104      	bne.n	40028c <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  400282:	4b07      	ldr	r3, [pc, #28]	; (4002a0 <pio_handler_set+0x94>)
  400284:	681b      	ldr	r3, [r3, #0]
  400286:	3301      	adds	r3, #1
  400288:	4a05      	ldr	r2, [pc, #20]	; (4002a0 <pio_handler_set+0x94>)
  40028a:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40028c:	683a      	ldr	r2, [r7, #0]
  40028e:	6879      	ldr	r1, [r7, #4]
  400290:	68f8      	ldr	r0, [r7, #12]
  400292:	4b05      	ldr	r3, [pc, #20]	; (4002a8 <pio_handler_set+0x9c>)
  400294:	4798      	blx	r3

	return 0;
  400296:	2300      	movs	r3, #0
}
  400298:	4618      	mov	r0, r3
  40029a:	3718      	adds	r7, #24
  40029c:	46bd      	mov	sp, r7
  40029e:	bd80      	pop	{r7, pc}
  4002a0:	200004c8 	.word	0x200004c8
  4002a4:	20000458 	.word	0x20000458
  4002a8:	00400b8d 	.word	0x00400b8d

004002ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4002ac:	b580      	push	{r7, lr}
  4002ae:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4002b0:	210b      	movs	r1, #11
  4002b2:	4802      	ldr	r0, [pc, #8]	; (4002bc <PIOA_Handler+0x10>)
  4002b4:	4b02      	ldr	r3, [pc, #8]	; (4002c0 <PIOA_Handler+0x14>)
  4002b6:	4798      	blx	r3
}
  4002b8:	bf00      	nop
  4002ba:	bd80      	pop	{r7, pc}
  4002bc:	400e0e00 	.word	0x400e0e00
  4002c0:	00400139 	.word	0x00400139

004002c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4002c4:	b580      	push	{r7, lr}
  4002c6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4002c8:	210c      	movs	r1, #12
  4002ca:	4802      	ldr	r0, [pc, #8]	; (4002d4 <PIOB_Handler+0x10>)
  4002cc:	4b02      	ldr	r3, [pc, #8]	; (4002d8 <PIOB_Handler+0x14>)
  4002ce:	4798      	blx	r3
}
  4002d0:	bf00      	nop
  4002d2:	bd80      	pop	{r7, pc}
  4002d4:	400e1000 	.word	0x400e1000
  4002d8:	00400139 	.word	0x00400139

004002dc <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4002dc:	b480      	push	{r7}
  4002de:	b085      	sub	sp, #20
  4002e0:	af00      	add	r7, sp, #0
  4002e2:	6078      	str	r0, [r7, #4]
  4002e4:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4002e6:	687a      	ldr	r2, [r7, #4]
  4002e8:	683b      	ldr	r3, [r7, #0]
  4002ea:	019b      	lsls	r3, r3, #6
  4002ec:	4413      	add	r3, r2
  4002ee:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  4002f0:	68fb      	ldr	r3, [r7, #12]
  4002f2:	6a1b      	ldr	r3, [r3, #32]
}
  4002f4:	4618      	mov	r0, r3
  4002f6:	3714      	adds	r7, #20
  4002f8:	46bd      	mov	sp, r7
  4002fa:	bc80      	pop	{r7}
  4002fc:	4770      	bx	lr

004002fe <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4002fe:	b480      	push	{r7}
  400300:	b089      	sub	sp, #36	; 0x24
  400302:	af00      	add	r7, sp, #0
  400304:	60f8      	str	r0, [r7, #12]
  400306:	60b9      	str	r1, [r7, #8]
  400308:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40030a:	68bb      	ldr	r3, [r7, #8]
  40030c:	011a      	lsls	r2, r3, #4
  40030e:	687b      	ldr	r3, [r7, #4]
  400310:	429a      	cmp	r2, r3
  400312:	d802      	bhi.n	40031a <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  400314:	2310      	movs	r3, #16
  400316:	61fb      	str	r3, [r7, #28]
  400318:	e001      	b.n	40031e <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  40031a:	2308      	movs	r3, #8
  40031c:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40031e:	687b      	ldr	r3, [r7, #4]
  400320:	00da      	lsls	r2, r3, #3
  400322:	69fb      	ldr	r3, [r7, #28]
  400324:	68b9      	ldr	r1, [r7, #8]
  400326:	fb01 f303 	mul.w	r3, r1, r3
  40032a:	085b      	lsrs	r3, r3, #1
  40032c:	441a      	add	r2, r3
  40032e:	69fb      	ldr	r3, [r7, #28]
  400330:	68b9      	ldr	r1, [r7, #8]
  400332:	fb01 f303 	mul.w	r3, r1, r3
  400336:	fbb2 f3f3 	udiv	r3, r2, r3
  40033a:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  40033c:	69bb      	ldr	r3, [r7, #24]
  40033e:	08db      	lsrs	r3, r3, #3
  400340:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  400342:	69bb      	ldr	r3, [r7, #24]
  400344:	f003 0307 	and.w	r3, r3, #7
  400348:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40034a:	697b      	ldr	r3, [r7, #20]
  40034c:	2b00      	cmp	r3, #0
  40034e:	d003      	beq.n	400358 <usart_set_async_baudrate+0x5a>
  400350:	697b      	ldr	r3, [r7, #20]
  400352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  400356:	d301      	bcc.n	40035c <usart_set_async_baudrate+0x5e>
		return 1;
  400358:	2301      	movs	r3, #1
  40035a:	e00f      	b.n	40037c <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  40035c:	69fb      	ldr	r3, [r7, #28]
  40035e:	2b08      	cmp	r3, #8
  400360:	d105      	bne.n	40036e <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  400362:	68fb      	ldr	r3, [r7, #12]
  400364:	685b      	ldr	r3, [r3, #4]
  400366:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  40036a:	68fb      	ldr	r3, [r7, #12]
  40036c:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40036e:	693b      	ldr	r3, [r7, #16]
  400370:	041a      	lsls	r2, r3, #16
  400372:	697b      	ldr	r3, [r7, #20]
  400374:	431a      	orrs	r2, r3
  400376:	68fb      	ldr	r3, [r7, #12]
  400378:	621a      	str	r2, [r3, #32]

	return 0;
  40037a:	2300      	movs	r3, #0
}
  40037c:	4618      	mov	r0, r3
  40037e:	3724      	adds	r7, #36	; 0x24
  400380:	46bd      	mov	sp, r7
  400382:	bc80      	pop	{r7}
  400384:	4770      	bx	lr
	...

00400388 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  400388:	b580      	push	{r7, lr}
  40038a:	b082      	sub	sp, #8
  40038c:	af00      	add	r7, sp, #0
  40038e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  400390:	6878      	ldr	r0, [r7, #4]
  400392:	4b0f      	ldr	r3, [pc, #60]	; (4003d0 <usart_reset+0x48>)
  400394:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400396:	687b      	ldr	r3, [r7, #4]
  400398:	2200      	movs	r2, #0
  40039a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	2200      	movs	r2, #0
  4003a0:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4003a2:	687b      	ldr	r3, [r7, #4]
  4003a4:	2200      	movs	r2, #0
  4003a6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4003a8:	6878      	ldr	r0, [r7, #4]
  4003aa:	4b0a      	ldr	r3, [pc, #40]	; (4003d4 <usart_reset+0x4c>)
  4003ac:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4003ae:	6878      	ldr	r0, [r7, #4]
  4003b0:	4b09      	ldr	r3, [pc, #36]	; (4003d8 <usart_reset+0x50>)
  4003b2:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4003b4:	6878      	ldr	r0, [r7, #4]
  4003b6:	4b09      	ldr	r3, [pc, #36]	; (4003dc <usart_reset+0x54>)
  4003b8:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4003ba:	6878      	ldr	r0, [r7, #4]
  4003bc:	4b08      	ldr	r3, [pc, #32]	; (4003e0 <usart_reset+0x58>)
  4003be:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
  4003c0:	6878      	ldr	r0, [r7, #4]
  4003c2:	4b08      	ldr	r3, [pc, #32]	; (4003e4 <usart_reset+0x5c>)
  4003c4:	4798      	blx	r3
#endif
}
  4003c6:	bf00      	nop
  4003c8:	3708      	adds	r7, #8
  4003ca:	46bd      	mov	sp, r7
  4003cc:	bd80      	pop	{r7, pc}
  4003ce:	bf00      	nop
  4003d0:	004005f9 	.word	0x004005f9
  4003d4:	00400485 	.word	0x00400485
  4003d8:	004004b5 	.word	0x004004b5
  4003dc:	00400517 	.word	0x00400517
  4003e0:	0040054b 	.word	0x0040054b
  4003e4:	00400531 	.word	0x00400531

004003e8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4003e8:	b580      	push	{r7, lr}
  4003ea:	b084      	sub	sp, #16
  4003ec:	af00      	add	r7, sp, #0
  4003ee:	60f8      	str	r0, [r7, #12]
  4003f0:	60b9      	str	r1, [r7, #8]
  4003f2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4003f4:	68f8      	ldr	r0, [r7, #12]
  4003f6:	4b1a      	ldr	r3, [pc, #104]	; (400460 <usart_init_rs232+0x78>)
  4003f8:	4798      	blx	r3

	ul_reg_val = 0;
  4003fa:	4b1a      	ldr	r3, [pc, #104]	; (400464 <usart_init_rs232+0x7c>)
  4003fc:	2200      	movs	r2, #0
  4003fe:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400400:	68bb      	ldr	r3, [r7, #8]
  400402:	2b00      	cmp	r3, #0
  400404:	d009      	beq.n	40041a <usart_init_rs232+0x32>
  400406:	68bb      	ldr	r3, [r7, #8]
  400408:	681b      	ldr	r3, [r3, #0]
  40040a:	687a      	ldr	r2, [r7, #4]
  40040c:	4619      	mov	r1, r3
  40040e:	68f8      	ldr	r0, [r7, #12]
  400410:	4b15      	ldr	r3, [pc, #84]	; (400468 <usart_init_rs232+0x80>)
  400412:	4798      	blx	r3
  400414:	4603      	mov	r3, r0
  400416:	2b00      	cmp	r3, #0
  400418:	d001      	beq.n	40041e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  40041a:	2301      	movs	r3, #1
  40041c:	e01b      	b.n	400456 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40041e:	68bb      	ldr	r3, [r7, #8]
  400420:	685a      	ldr	r2, [r3, #4]
  400422:	68bb      	ldr	r3, [r7, #8]
  400424:	689b      	ldr	r3, [r3, #8]
  400426:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400428:	68bb      	ldr	r3, [r7, #8]
  40042a:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40042c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40042e:	68bb      	ldr	r3, [r7, #8]
  400430:	68db      	ldr	r3, [r3, #12]
  400432:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400434:	4b0b      	ldr	r3, [pc, #44]	; (400464 <usart_init_rs232+0x7c>)
  400436:	681b      	ldr	r3, [r3, #0]
  400438:	4313      	orrs	r3, r2
  40043a:	4a0a      	ldr	r2, [pc, #40]	; (400464 <usart_init_rs232+0x7c>)
  40043c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40043e:	4b09      	ldr	r3, [pc, #36]	; (400464 <usart_init_rs232+0x7c>)
  400440:	681b      	ldr	r3, [r3, #0]
  400442:	4a08      	ldr	r2, [pc, #32]	; (400464 <usart_init_rs232+0x7c>)
  400444:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  400446:	68fb      	ldr	r3, [r7, #12]
  400448:	685a      	ldr	r2, [r3, #4]
  40044a:	4b06      	ldr	r3, [pc, #24]	; (400464 <usart_init_rs232+0x7c>)
  40044c:	681b      	ldr	r3, [r3, #0]
  40044e:	431a      	orrs	r2, r3
  400450:	68fb      	ldr	r3, [r7, #12]
  400452:	605a      	str	r2, [r3, #4]

	return 0;
  400454:	2300      	movs	r3, #0
}
  400456:	4618      	mov	r0, r3
  400458:	3710      	adds	r7, #16
  40045a:	46bd      	mov	sp, r7
  40045c:	bd80      	pop	{r7, pc}
  40045e:	bf00      	nop
  400460:	00400389 	.word	0x00400389
  400464:	200004d0 	.word	0x200004d0
  400468:	004002ff 	.word	0x004002ff

0040046c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  40046c:	b480      	push	{r7}
  40046e:	b083      	sub	sp, #12
  400470:	af00      	add	r7, sp, #0
  400472:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  400474:	687b      	ldr	r3, [r7, #4]
  400476:	2240      	movs	r2, #64	; 0x40
  400478:	601a      	str	r2, [r3, #0]
}
  40047a:	bf00      	nop
  40047c:	370c      	adds	r7, #12
  40047e:	46bd      	mov	sp, r7
  400480:	bc80      	pop	{r7}
  400482:	4770      	bx	lr

00400484 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  400484:	b480      	push	{r7}
  400486:	b083      	sub	sp, #12
  400488:	af00      	add	r7, sp, #0
  40048a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40048c:	687b      	ldr	r3, [r7, #4]
  40048e:	2288      	movs	r2, #136	; 0x88
  400490:	601a      	str	r2, [r3, #0]
}
  400492:	bf00      	nop
  400494:	370c      	adds	r7, #12
  400496:	46bd      	mov	sp, r7
  400498:	bc80      	pop	{r7}
  40049a:	4770      	bx	lr

0040049c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  40049c:	b480      	push	{r7}
  40049e:	b083      	sub	sp, #12
  4004a0:	af00      	add	r7, sp, #0
  4004a2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4004a4:	687b      	ldr	r3, [r7, #4]
  4004a6:	2210      	movs	r2, #16
  4004a8:	601a      	str	r2, [r3, #0]
}
  4004aa:	bf00      	nop
  4004ac:	370c      	adds	r7, #12
  4004ae:	46bd      	mov	sp, r7
  4004b0:	bc80      	pop	{r7}
  4004b2:	4770      	bx	lr

004004b4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4004b4:	b480      	push	{r7}
  4004b6:	b083      	sub	sp, #12
  4004b8:	af00      	add	r7, sp, #0
  4004ba:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4004bc:	687b      	ldr	r3, [r7, #4]
  4004be:	2224      	movs	r2, #36	; 0x24
  4004c0:	601a      	str	r2, [r3, #0]
}
  4004c2:	bf00      	nop
  4004c4:	370c      	adds	r7, #12
  4004c6:	46bd      	mov	sp, r7
  4004c8:	bc80      	pop	{r7}
  4004ca:	4770      	bx	lr

004004cc <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4004cc:	b480      	push	{r7}
  4004ce:	b083      	sub	sp, #12
  4004d0:	af00      	add	r7, sp, #0
  4004d2:	6078      	str	r0, [r7, #4]
  4004d4:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
  4004d6:	687b      	ldr	r3, [r7, #4]
  4004d8:	683a      	ldr	r2, [r7, #0]
  4004da:	609a      	str	r2, [r3, #8]
}
  4004dc:	bf00      	nop
  4004de:	370c      	adds	r7, #12
  4004e0:	46bd      	mov	sp, r7
  4004e2:	bc80      	pop	{r7}
  4004e4:	4770      	bx	lr

004004e6 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
  4004e6:	b480      	push	{r7}
  4004e8:	b083      	sub	sp, #12
  4004ea:	af00      	add	r7, sp, #0
  4004ec:	6078      	str	r0, [r7, #4]
  4004ee:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
  4004f0:	687b      	ldr	r3, [r7, #4]
  4004f2:	683a      	ldr	r2, [r7, #0]
  4004f4:	60da      	str	r2, [r3, #12]
}
  4004f6:	bf00      	nop
  4004f8:	370c      	adds	r7, #12
  4004fa:	46bd      	mov	sp, r7
  4004fc:	bc80      	pop	{r7}
  4004fe:	4770      	bx	lr

00400500 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
  400500:	b480      	push	{r7}
  400502:	b083      	sub	sp, #12
  400504:	af00      	add	r7, sp, #0
  400506:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
  400508:	687b      	ldr	r3, [r7, #4]
  40050a:	695b      	ldr	r3, [r3, #20]
}
  40050c:	4618      	mov	r0, r3
  40050e:	370c      	adds	r7, #12
  400510:	46bd      	mov	sp, r7
  400512:	bc80      	pop	{r7}
  400514:	4770      	bx	lr

00400516 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  400516:	b480      	push	{r7}
  400518:	b083      	sub	sp, #12
  40051a:	af00      	add	r7, sp, #0
  40051c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  40051e:	687b      	ldr	r3, [r7, #4]
  400520:	f44f 7280 	mov.w	r2, #256	; 0x100
  400524:	601a      	str	r2, [r3, #0]
}
  400526:	bf00      	nop
  400528:	370c      	adds	r7, #12
  40052a:	46bd      	mov	sp, r7
  40052c:	bc80      	pop	{r7}
  40052e:	4770      	bx	lr

00400530 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
  400530:	b480      	push	{r7}
  400532:	b083      	sub	sp, #12
  400534:	af00      	add	r7, sp, #0
  400536:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
  400538:	687b      	ldr	r3, [r7, #4]
  40053a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  40053e:	601a      	str	r2, [r3, #0]
}
  400540:	bf00      	nop
  400542:	370c      	adds	r7, #12
  400544:	46bd      	mov	sp, r7
  400546:	bc80      	pop	{r7}
  400548:	4770      	bx	lr

0040054a <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  40054a:	b480      	push	{r7}
  40054c:	b083      	sub	sp, #12
  40054e:	af00      	add	r7, sp, #0
  400550:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  400552:	687b      	ldr	r3, [r7, #4]
  400554:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400558:	601a      	str	r2, [r3, #0]
}
  40055a:	bf00      	nop
  40055c:	370c      	adds	r7, #12
  40055e:	46bd      	mov	sp, r7
  400560:	bc80      	pop	{r7}
  400562:	4770      	bx	lr

00400564 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
  400564:	b480      	push	{r7}
  400566:	b083      	sub	sp, #12
  400568:	af00      	add	r7, sp, #0
  40056a:	6078      	str	r0, [r7, #4]
  40056c:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40056e:	bf00      	nop
  400570:	687b      	ldr	r3, [r7, #4]
  400572:	695b      	ldr	r3, [r3, #20]
  400574:	f003 0302 	and.w	r3, r3, #2
  400578:	2b00      	cmp	r3, #0
  40057a:	d0f9      	beq.n	400570 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40057c:	683b      	ldr	r3, [r7, #0]
  40057e:	f3c3 0208 	ubfx	r2, r3, #0, #9
  400582:	687b      	ldr	r3, [r7, #4]
  400584:	61da      	str	r2, [r3, #28]

	return 0;
  400586:	2300      	movs	r3, #0
}
  400588:	4618      	mov	r0, r3
  40058a:	370c      	adds	r7, #12
  40058c:	46bd      	mov	sp, r7
  40058e:	bc80      	pop	{r7}
  400590:	4770      	bx	lr
	...

00400594 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
  400594:	b580      	push	{r7, lr}
  400596:	b082      	sub	sp, #8
  400598:	af00      	add	r7, sp, #0
  40059a:	6078      	str	r0, [r7, #4]
  40059c:	6039      	str	r1, [r7, #0]
	while (*string != '\0') {
  40059e:	e007      	b.n	4005b0 <usart_write_line+0x1c>
		usart_putchar(p_usart, *string++);
  4005a0:	683b      	ldr	r3, [r7, #0]
  4005a2:	1c5a      	adds	r2, r3, #1
  4005a4:	603a      	str	r2, [r7, #0]
  4005a6:	781b      	ldrb	r3, [r3, #0]
  4005a8:	4619      	mov	r1, r3
  4005aa:	6878      	ldr	r0, [r7, #4]
  4005ac:	4b04      	ldr	r3, [pc, #16]	; (4005c0 <usart_write_line+0x2c>)
  4005ae:	4798      	blx	r3
	while (*string != '\0') {
  4005b0:	683b      	ldr	r3, [r7, #0]
  4005b2:	781b      	ldrb	r3, [r3, #0]
  4005b4:	2b00      	cmp	r3, #0
  4005b6:	d1f3      	bne.n	4005a0 <usart_write_line+0xc>
	}
}
  4005b8:	bf00      	nop
  4005ba:	3708      	adds	r7, #8
  4005bc:	46bd      	mov	sp, r7
  4005be:	bd80      	pop	{r7, pc}
  4005c0:	00400565 	.word	0x00400565

004005c4 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  4005c4:	b480      	push	{r7}
  4005c6:	b083      	sub	sp, #12
  4005c8:	af00      	add	r7, sp, #0
  4005ca:	6078      	str	r0, [r7, #4]
  4005cc:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4005ce:	687b      	ldr	r3, [r7, #4]
  4005d0:	695b      	ldr	r3, [r3, #20]
  4005d2:	f003 0301 	and.w	r3, r3, #1
  4005d6:	2b00      	cmp	r3, #0
  4005d8:	d101      	bne.n	4005de <usart_read+0x1a>
		return 1;
  4005da:	2301      	movs	r3, #1
  4005dc:	e006      	b.n	4005ec <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4005de:	687b      	ldr	r3, [r7, #4]
  4005e0:	699b      	ldr	r3, [r3, #24]
  4005e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4005e6:	683b      	ldr	r3, [r7, #0]
  4005e8:	601a      	str	r2, [r3, #0]

	return 0;
  4005ea:	2300      	movs	r3, #0
}
  4005ec:	4618      	mov	r0, r3
  4005ee:	370c      	adds	r7, #12
  4005f0:	46bd      	mov	sp, r7
  4005f2:	bc80      	pop	{r7}
  4005f4:	4770      	bx	lr
	...

004005f8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4005f8:	b480      	push	{r7}
  4005fa:	b083      	sub	sp, #12
  4005fc:	af00      	add	r7, sp, #0
  4005fe:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400600:	687b      	ldr	r3, [r7, #4]
  400602:	4a04      	ldr	r2, [pc, #16]	; (400614 <usart_disable_writeprotect+0x1c>)
  400604:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  400608:	bf00      	nop
  40060a:	370c      	adds	r7, #12
  40060c:	46bd      	mov	sp, r7
  40060e:	bc80      	pop	{r7}
  400610:	4770      	bx	lr
  400612:	bf00      	nop
  400614:	55534100 	.word	0x55534100

00400618 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  400618:	b580      	push	{r7, lr}
  40061a:	b082      	sub	sp, #8
  40061c:	af00      	add	r7, sp, #0
  40061e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400620:	687b      	ldr	r3, [r7, #4]
  400622:	2b07      	cmp	r3, #7
  400624:	d831      	bhi.n	40068a <osc_enable+0x72>
  400626:	a201      	add	r2, pc, #4	; (adr r2, 40062c <osc_enable+0x14>)
  400628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40062c:	00400689 	.word	0x00400689
  400630:	0040064d 	.word	0x0040064d
  400634:	00400655 	.word	0x00400655
  400638:	0040065d 	.word	0x0040065d
  40063c:	00400665 	.word	0x00400665
  400640:	0040066d 	.word	0x0040066d
  400644:	00400675 	.word	0x00400675
  400648:	0040067f 	.word	0x0040067f
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  40064c:	2000      	movs	r0, #0
  40064e:	4b11      	ldr	r3, [pc, #68]	; (400694 <osc_enable+0x7c>)
  400650:	4798      	blx	r3
		break;
  400652:	e01a      	b.n	40068a <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400654:	2001      	movs	r0, #1
  400656:	4b0f      	ldr	r3, [pc, #60]	; (400694 <osc_enable+0x7c>)
  400658:	4798      	blx	r3
		break;
  40065a:	e016      	b.n	40068a <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  40065c:	2000      	movs	r0, #0
  40065e:	4b0e      	ldr	r3, [pc, #56]	; (400698 <osc_enable+0x80>)
  400660:	4798      	blx	r3
		break;
  400662:	e012      	b.n	40068a <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400664:	2010      	movs	r0, #16
  400666:	4b0c      	ldr	r3, [pc, #48]	; (400698 <osc_enable+0x80>)
  400668:	4798      	blx	r3
		break;
  40066a:	e00e      	b.n	40068a <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  40066c:	2020      	movs	r0, #32
  40066e:	4b0a      	ldr	r3, [pc, #40]	; (400698 <osc_enable+0x80>)
  400670:	4798      	blx	r3
		break;
  400672:	e00a      	b.n	40068a <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400674:	213e      	movs	r1, #62	; 0x3e
  400676:	2000      	movs	r0, #0
  400678:	4b08      	ldr	r3, [pc, #32]	; (40069c <osc_enable+0x84>)
  40067a:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40067c:	e005      	b.n	40068a <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40067e:	213e      	movs	r1, #62	; 0x3e
  400680:	2001      	movs	r0, #1
  400682:	4b06      	ldr	r3, [pc, #24]	; (40069c <osc_enable+0x84>)
  400684:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400686:	e000      	b.n	40068a <osc_enable+0x72>
		break;
  400688:	bf00      	nop
	}
}
  40068a:	bf00      	nop
  40068c:	3708      	adds	r7, #8
  40068e:	46bd      	mov	sp, r7
  400690:	bd80      	pop	{r7, pc}
  400692:	bf00      	nop
  400694:	00400ead 	.word	0x00400ead
  400698:	00400f19 	.word	0x00400f19
  40069c:	00400f89 	.word	0x00400f89

004006a0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4006a0:	b580      	push	{r7, lr}
  4006a2:	b082      	sub	sp, #8
  4006a4:	af00      	add	r7, sp, #0
  4006a6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4006a8:	687b      	ldr	r3, [r7, #4]
  4006aa:	2b07      	cmp	r3, #7
  4006ac:	d826      	bhi.n	4006fc <osc_is_ready+0x5c>
  4006ae:	a201      	add	r2, pc, #4	; (adr r2, 4006b4 <osc_is_ready+0x14>)
  4006b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4006b4:	004006d5 	.word	0x004006d5
  4006b8:	004006d9 	.word	0x004006d9
  4006bc:	004006d9 	.word	0x004006d9
  4006c0:	004006eb 	.word	0x004006eb
  4006c4:	004006eb 	.word	0x004006eb
  4006c8:	004006eb 	.word	0x004006eb
  4006cc:	004006eb 	.word	0x004006eb
  4006d0:	004006eb 	.word	0x004006eb
	case OSC_SLCK_32K_RC:
		return 1;
  4006d4:	2301      	movs	r3, #1
  4006d6:	e012      	b.n	4006fe <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4006d8:	4b0b      	ldr	r3, [pc, #44]	; (400708 <osc_is_ready+0x68>)
  4006da:	4798      	blx	r3
  4006dc:	4603      	mov	r3, r0
  4006de:	2b00      	cmp	r3, #0
  4006e0:	bf14      	ite	ne
  4006e2:	2301      	movne	r3, #1
  4006e4:	2300      	moveq	r3, #0
  4006e6:	b2db      	uxtb	r3, r3
  4006e8:	e009      	b.n	4006fe <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4006ea:	4b08      	ldr	r3, [pc, #32]	; (40070c <osc_is_ready+0x6c>)
  4006ec:	4798      	blx	r3
  4006ee:	4603      	mov	r3, r0
  4006f0:	2b00      	cmp	r3, #0
  4006f2:	bf14      	ite	ne
  4006f4:	2301      	movne	r3, #1
  4006f6:	2300      	moveq	r3, #0
  4006f8:	b2db      	uxtb	r3, r3
  4006fa:	e000      	b.n	4006fe <osc_is_ready+0x5e>
	}

	return 0;
  4006fc:	2300      	movs	r3, #0
}
  4006fe:	4618      	mov	r0, r3
  400700:	3708      	adds	r7, #8
  400702:	46bd      	mov	sp, r7
  400704:	bd80      	pop	{r7, pc}
  400706:	bf00      	nop
  400708:	00400ee5 	.word	0x00400ee5
  40070c:	00401001 	.word	0x00401001

00400710 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400710:	b480      	push	{r7}
  400712:	b083      	sub	sp, #12
  400714:	af00      	add	r7, sp, #0
  400716:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400718:	687b      	ldr	r3, [r7, #4]
  40071a:	2b07      	cmp	r3, #7
  40071c:	d825      	bhi.n	40076a <osc_get_rate+0x5a>
  40071e:	a201      	add	r2, pc, #4	; (adr r2, 400724 <osc_get_rate+0x14>)
  400720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400724:	00400745 	.word	0x00400745
  400728:	0040074b 	.word	0x0040074b
  40072c:	00400751 	.word	0x00400751
  400730:	00400757 	.word	0x00400757
  400734:	0040075b 	.word	0x0040075b
  400738:	0040075f 	.word	0x0040075f
  40073c:	00400763 	.word	0x00400763
  400740:	00400767 	.word	0x00400767
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400744:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400748:	e010      	b.n	40076c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40074a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40074e:	e00d      	b.n	40076c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400754:	e00a      	b.n	40076c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400756:	4b08      	ldr	r3, [pc, #32]	; (400778 <osc_get_rate+0x68>)
  400758:	e008      	b.n	40076c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40075a:	4b08      	ldr	r3, [pc, #32]	; (40077c <osc_get_rate+0x6c>)
  40075c:	e006      	b.n	40076c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40075e:	4b08      	ldr	r3, [pc, #32]	; (400780 <osc_get_rate+0x70>)
  400760:	e004      	b.n	40076c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400762:	4b07      	ldr	r3, [pc, #28]	; (400780 <osc_get_rate+0x70>)
  400764:	e002      	b.n	40076c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400766:	4b06      	ldr	r3, [pc, #24]	; (400780 <osc_get_rate+0x70>)
  400768:	e000      	b.n	40076c <osc_get_rate+0x5c>
	}

	return 0;
  40076a:	2300      	movs	r3, #0
}
  40076c:	4618      	mov	r0, r3
  40076e:	370c      	adds	r7, #12
  400770:	46bd      	mov	sp, r7
  400772:	bc80      	pop	{r7}
  400774:	4770      	bx	lr
  400776:	bf00      	nop
  400778:	003d0900 	.word	0x003d0900
  40077c:	007a1200 	.word	0x007a1200
  400780:	00b71b00 	.word	0x00b71b00

00400784 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400784:	b580      	push	{r7, lr}
  400786:	b082      	sub	sp, #8
  400788:	af00      	add	r7, sp, #0
  40078a:	4603      	mov	r3, r0
  40078c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40078e:	bf00      	nop
  400790:	79fb      	ldrb	r3, [r7, #7]
  400792:	4618      	mov	r0, r3
  400794:	4b05      	ldr	r3, [pc, #20]	; (4007ac <osc_wait_ready+0x28>)
  400796:	4798      	blx	r3
  400798:	4603      	mov	r3, r0
  40079a:	f083 0301 	eor.w	r3, r3, #1
  40079e:	b2db      	uxtb	r3, r3
  4007a0:	2b00      	cmp	r3, #0
  4007a2:	d1f5      	bne.n	400790 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4007a4:	bf00      	nop
  4007a6:	3708      	adds	r7, #8
  4007a8:	46bd      	mov	sp, r7
  4007aa:	bd80      	pop	{r7, pc}
  4007ac:	004006a1 	.word	0x004006a1

004007b0 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4007b0:	b580      	push	{r7, lr}
  4007b2:	b086      	sub	sp, #24
  4007b4:	af00      	add	r7, sp, #0
  4007b6:	60f8      	str	r0, [r7, #12]
  4007b8:	607a      	str	r2, [r7, #4]
  4007ba:	603b      	str	r3, [r7, #0]
  4007bc:	460b      	mov	r3, r1
  4007be:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4007c0:	7afb      	ldrb	r3, [r7, #11]
  4007c2:	4618      	mov	r0, r3
  4007c4:	4b0d      	ldr	r3, [pc, #52]	; (4007fc <pll_config_init+0x4c>)
  4007c6:	4798      	blx	r3
  4007c8:	4602      	mov	r2, r0
  4007ca:	687b      	ldr	r3, [r7, #4]
  4007cc:	fbb2 f3f3 	udiv	r3, r2, r3
  4007d0:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4007d2:	697b      	ldr	r3, [r7, #20]
  4007d4:	683a      	ldr	r2, [r7, #0]
  4007d6:	fb02 f303 	mul.w	r3, r2, r3
  4007da:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4007dc:	683b      	ldr	r3, [r7, #0]
  4007de:	3b01      	subs	r3, #1
  4007e0:	041a      	lsls	r2, r3, #16
  4007e2:	4b07      	ldr	r3, [pc, #28]	; (400800 <pll_config_init+0x50>)
  4007e4:	4013      	ands	r3, r2
  4007e6:	687a      	ldr	r2, [r7, #4]
  4007e8:	b2d2      	uxtb	r2, r2
  4007ea:	4313      	orrs	r3, r2
  4007ec:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  4007f0:	68fb      	ldr	r3, [r7, #12]
  4007f2:	601a      	str	r2, [r3, #0]
}
  4007f4:	bf00      	nop
  4007f6:	3718      	adds	r7, #24
  4007f8:	46bd      	mov	sp, r7
  4007fa:	bd80      	pop	{r7, pc}
  4007fc:	00400711 	.word	0x00400711
  400800:	07ff0000 	.word	0x07ff0000

00400804 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400804:	b580      	push	{r7, lr}
  400806:	b082      	sub	sp, #8
  400808:	af00      	add	r7, sp, #0
  40080a:	6078      	str	r0, [r7, #4]
  40080c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40080e:	683b      	ldr	r3, [r7, #0]
  400810:	2b00      	cmp	r3, #0
  400812:	d108      	bne.n	400826 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400814:	4b09      	ldr	r3, [pc, #36]	; (40083c <pll_enable+0x38>)
  400816:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400818:	4a09      	ldr	r2, [pc, #36]	; (400840 <pll_enable+0x3c>)
  40081a:	687b      	ldr	r3, [r7, #4]
  40081c:	681b      	ldr	r3, [r3, #0]
  40081e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400822:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400824:	e005      	b.n	400832 <pll_enable+0x2e>
		pmc_disable_pllbck();
  400826:	4b07      	ldr	r3, [pc, #28]	; (400844 <pll_enable+0x40>)
  400828:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40082a:	4a05      	ldr	r2, [pc, #20]	; (400840 <pll_enable+0x3c>)
  40082c:	687b      	ldr	r3, [r7, #4]
  40082e:	681b      	ldr	r3, [r3, #0]
  400830:	62d3      	str	r3, [r2, #44]	; 0x2c
}
  400832:	bf00      	nop
  400834:	3708      	adds	r7, #8
  400836:	46bd      	mov	sp, r7
  400838:	bd80      	pop	{r7, pc}
  40083a:	bf00      	nop
  40083c:	00401019 	.word	0x00401019
  400840:	400e0400 	.word	0x400e0400
  400844:	00401049 	.word	0x00401049

00400848 <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400848:	b580      	push	{r7, lr}
  40084a:	b082      	sub	sp, #8
  40084c:	af00      	add	r7, sp, #0
  40084e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400850:	687b      	ldr	r3, [r7, #4]
  400852:	2b00      	cmp	r3, #0
  400854:	d103      	bne.n	40085e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  400856:	4b05      	ldr	r3, [pc, #20]	; (40086c <pll_is_locked+0x24>)
  400858:	4798      	blx	r3
  40085a:	4603      	mov	r3, r0
  40085c:	e002      	b.n	400864 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  40085e:	4b04      	ldr	r3, [pc, #16]	; (400870 <pll_is_locked+0x28>)
  400860:	4798      	blx	r3
  400862:	4603      	mov	r3, r0
	}
}
  400864:	4618      	mov	r0, r3
  400866:	3708      	adds	r7, #8
  400868:	46bd      	mov	sp, r7
  40086a:	bd80      	pop	{r7, pc}
  40086c:	00401031 	.word	0x00401031
  400870:	00401061 	.word	0x00401061

00400874 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400874:	b580      	push	{r7, lr}
  400876:	b082      	sub	sp, #8
  400878:	af00      	add	r7, sp, #0
  40087a:	4603      	mov	r3, r0
  40087c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40087e:	79fb      	ldrb	r3, [r7, #7]
  400880:	3b03      	subs	r3, #3
  400882:	2b04      	cmp	r3, #4
  400884:	d808      	bhi.n	400898 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400886:	79fb      	ldrb	r3, [r7, #7]
  400888:	4618      	mov	r0, r3
  40088a:	4b06      	ldr	r3, [pc, #24]	; (4008a4 <pll_enable_source+0x30>)
  40088c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40088e:	79fb      	ldrb	r3, [r7, #7]
  400890:	4618      	mov	r0, r3
  400892:	4b05      	ldr	r3, [pc, #20]	; (4008a8 <pll_enable_source+0x34>)
  400894:	4798      	blx	r3
		break;
  400896:	e000      	b.n	40089a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400898:	bf00      	nop
	}
}
  40089a:	bf00      	nop
  40089c:	3708      	adds	r7, #8
  40089e:	46bd      	mov	sp, r7
  4008a0:	bd80      	pop	{r7, pc}
  4008a2:	bf00      	nop
  4008a4:	00400619 	.word	0x00400619
  4008a8:	00400785 	.word	0x00400785

004008ac <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4008ac:	b580      	push	{r7, lr}
  4008ae:	b082      	sub	sp, #8
  4008b0:	af00      	add	r7, sp, #0
  4008b2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4008b4:	bf00      	nop
  4008b6:	6878      	ldr	r0, [r7, #4]
  4008b8:	4b04      	ldr	r3, [pc, #16]	; (4008cc <pll_wait_for_lock+0x20>)
  4008ba:	4798      	blx	r3
  4008bc:	4603      	mov	r3, r0
  4008be:	2b00      	cmp	r3, #0
  4008c0:	d0f9      	beq.n	4008b6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4008c2:	2300      	movs	r3, #0
}
  4008c4:	4618      	mov	r0, r3
  4008c6:	3708      	adds	r7, #8
  4008c8:	46bd      	mov	sp, r7
  4008ca:	bd80      	pop	{r7, pc}
  4008cc:	00400849 	.word	0x00400849

004008d0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4008d0:	b580      	push	{r7, lr}
  4008d2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4008d4:	2006      	movs	r0, #6
  4008d6:	4b04      	ldr	r3, [pc, #16]	; (4008e8 <sysclk_get_main_hz+0x18>)
  4008d8:	4798      	blx	r3
  4008da:	4602      	mov	r2, r0
  4008dc:	4613      	mov	r3, r2
  4008de:	009b      	lsls	r3, r3, #2
  4008e0:	4413      	add	r3, r2
  4008e2:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4008e4:	4618      	mov	r0, r3
  4008e6:	bd80      	pop	{r7, pc}
  4008e8:	00400711 	.word	0x00400711

004008ec <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4008ec:	b580      	push	{r7, lr}
  4008ee:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4008f0:	4b02      	ldr	r3, [pc, #8]	; (4008fc <sysclk_get_cpu_hz+0x10>)
  4008f2:	4798      	blx	r3
  4008f4:	4603      	mov	r3, r0
  4008f6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4008f8:	4618      	mov	r0, r3
  4008fa:	bd80      	pop	{r7, pc}
  4008fc:	004008d1 	.word	0x004008d1

00400900 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400900:	b590      	push	{r4, r7, lr}
  400902:	b083      	sub	sp, #12
  400904:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400906:	4811      	ldr	r0, [pc, #68]	; (40094c <sysclk_init+0x4c>)
  400908:	4b11      	ldr	r3, [pc, #68]	; (400950 <sysclk_init+0x50>)
  40090a:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40090c:	2006      	movs	r0, #6
  40090e:	4b11      	ldr	r3, [pc, #68]	; (400954 <sysclk_init+0x54>)
  400910:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400912:	1d38      	adds	r0, r7, #4
  400914:	2314      	movs	r3, #20
  400916:	2201      	movs	r2, #1
  400918:	2106      	movs	r1, #6
  40091a:	4c0f      	ldr	r4, [pc, #60]	; (400958 <sysclk_init+0x58>)
  40091c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40091e:	1d3b      	adds	r3, r7, #4
  400920:	2100      	movs	r1, #0
  400922:	4618      	mov	r0, r3
  400924:	4b0d      	ldr	r3, [pc, #52]	; (40095c <sysclk_init+0x5c>)
  400926:	4798      	blx	r3
		pll_wait_for_lock(0);
  400928:	2000      	movs	r0, #0
  40092a:	4b0d      	ldr	r3, [pc, #52]	; (400960 <sysclk_init+0x60>)
  40092c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40092e:	2010      	movs	r0, #16
  400930:	4b0c      	ldr	r3, [pc, #48]	; (400964 <sysclk_init+0x64>)
  400932:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400934:	4b0c      	ldr	r3, [pc, #48]	; (400968 <sysclk_init+0x68>)
  400936:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400938:	4b0c      	ldr	r3, [pc, #48]	; (40096c <sysclk_init+0x6c>)
  40093a:	4798      	blx	r3
  40093c:	4603      	mov	r3, r0
  40093e:	4618      	mov	r0, r3
  400940:	4b03      	ldr	r3, [pc, #12]	; (400950 <sysclk_init+0x50>)
  400942:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400944:	bf00      	nop
  400946:	370c      	adds	r7, #12
  400948:	46bd      	mov	sp, r7
  40094a:	bd90      	pop	{r4, r7, pc}
  40094c:	07270e00 	.word	0x07270e00
  400950:	00401815 	.word	0x00401815
  400954:	00400875 	.word	0x00400875
  400958:	004007b1 	.word	0x004007b1
  40095c:	00400805 	.word	0x00400805
  400960:	004008ad 	.word	0x004008ad
  400964:	00400e2d 	.word	0x00400e2d
  400968:	0040167d 	.word	0x0040167d
  40096c:	004008ed 	.word	0x004008ed

00400970 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  400970:	b480      	push	{r7}
  400972:	b085      	sub	sp, #20
  400974:	af00      	add	r7, sp, #0
  400976:	60f8      	str	r0, [r7, #12]
  400978:	60b9      	str	r1, [r7, #8]
  40097a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40097c:	687b      	ldr	r3, [r7, #4]
  40097e:	2b00      	cmp	r3, #0
  400980:	d003      	beq.n	40098a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  400982:	68fb      	ldr	r3, [r7, #12]
  400984:	68ba      	ldr	r2, [r7, #8]
  400986:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  400988:	e002      	b.n	400990 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  40098a:	68fb      	ldr	r3, [r7, #12]
  40098c:	68ba      	ldr	r2, [r7, #8]
  40098e:	661a      	str	r2, [r3, #96]	; 0x60
}
  400990:	bf00      	nop
  400992:	3714      	adds	r7, #20
  400994:	46bd      	mov	sp, r7
  400996:	bc80      	pop	{r7}
  400998:	4770      	bx	lr

0040099a <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40099a:	b480      	push	{r7}
  40099c:	b087      	sub	sp, #28
  40099e:	af00      	add	r7, sp, #0
  4009a0:	60f8      	str	r0, [r7, #12]
  4009a2:	60b9      	str	r1, [r7, #8]
  4009a4:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4009a6:	68fb      	ldr	r3, [r7, #12]
  4009a8:	687a      	ldr	r2, [r7, #4]
  4009aa:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4009ac:	68bb      	ldr	r3, [r7, #8]
  4009ae:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4009b2:	d04a      	beq.n	400a4a <pio_set_peripheral+0xb0>
  4009b4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4009b8:	d808      	bhi.n	4009cc <pio_set_peripheral+0x32>
  4009ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4009be:	d016      	beq.n	4009ee <pio_set_peripheral+0x54>
  4009c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4009c4:	d02c      	beq.n	400a20 <pio_set_peripheral+0x86>
  4009c6:	2b00      	cmp	r3, #0
  4009c8:	d069      	beq.n	400a9e <pio_set_peripheral+0x104>
  4009ca:	e064      	b.n	400a96 <pio_set_peripheral+0xfc>
  4009cc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4009d0:	d065      	beq.n	400a9e <pio_set_peripheral+0x104>
  4009d2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4009d6:	d803      	bhi.n	4009e0 <pio_set_peripheral+0x46>
  4009d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4009dc:	d04a      	beq.n	400a74 <pio_set_peripheral+0xda>
  4009de:	e05a      	b.n	400a96 <pio_set_peripheral+0xfc>
  4009e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4009e4:	d05b      	beq.n	400a9e <pio_set_peripheral+0x104>
  4009e6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4009ea:	d058      	beq.n	400a9e <pio_set_peripheral+0x104>
  4009ec:	e053      	b.n	400a96 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4009ee:	68fb      	ldr	r3, [r7, #12]
  4009f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4009f2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4009f4:	68fb      	ldr	r3, [r7, #12]
  4009f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4009f8:	687b      	ldr	r3, [r7, #4]
  4009fa:	43d9      	mvns	r1, r3
  4009fc:	697b      	ldr	r3, [r7, #20]
  4009fe:	400b      	ands	r3, r1
  400a00:	401a      	ands	r2, r3
  400a02:	68fb      	ldr	r3, [r7, #12]
  400a04:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a06:	68fb      	ldr	r3, [r7, #12]
  400a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400a0a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a0c:	68fb      	ldr	r3, [r7, #12]
  400a0e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a10:	687b      	ldr	r3, [r7, #4]
  400a12:	43d9      	mvns	r1, r3
  400a14:	697b      	ldr	r3, [r7, #20]
  400a16:	400b      	ands	r3, r1
  400a18:	401a      	ands	r2, r3
  400a1a:	68fb      	ldr	r3, [r7, #12]
  400a1c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400a1e:	e03a      	b.n	400a96 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a20:	68fb      	ldr	r3, [r7, #12]
  400a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400a24:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a26:	687a      	ldr	r2, [r7, #4]
  400a28:	697b      	ldr	r3, [r7, #20]
  400a2a:	431a      	orrs	r2, r3
  400a2c:	68fb      	ldr	r3, [r7, #12]
  400a2e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a30:	68fb      	ldr	r3, [r7, #12]
  400a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400a34:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a36:	68fb      	ldr	r3, [r7, #12]
  400a38:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400a3a:	687b      	ldr	r3, [r7, #4]
  400a3c:	43d9      	mvns	r1, r3
  400a3e:	697b      	ldr	r3, [r7, #20]
  400a40:	400b      	ands	r3, r1
  400a42:	401a      	ands	r2, r3
  400a44:	68fb      	ldr	r3, [r7, #12]
  400a46:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400a48:	e025      	b.n	400a96 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a4a:	68fb      	ldr	r3, [r7, #12]
  400a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400a4e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a50:	68fb      	ldr	r3, [r7, #12]
  400a52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400a54:	687b      	ldr	r3, [r7, #4]
  400a56:	43d9      	mvns	r1, r3
  400a58:	697b      	ldr	r3, [r7, #20]
  400a5a:	400b      	ands	r3, r1
  400a5c:	401a      	ands	r2, r3
  400a5e:	68fb      	ldr	r3, [r7, #12]
  400a60:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a62:	68fb      	ldr	r3, [r7, #12]
  400a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400a66:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a68:	687a      	ldr	r2, [r7, #4]
  400a6a:	697b      	ldr	r3, [r7, #20]
  400a6c:	431a      	orrs	r2, r3
  400a6e:	68fb      	ldr	r3, [r7, #12]
  400a70:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400a72:	e010      	b.n	400a96 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a74:	68fb      	ldr	r3, [r7, #12]
  400a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  400a78:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a7a:	687a      	ldr	r2, [r7, #4]
  400a7c:	697b      	ldr	r3, [r7, #20]
  400a7e:	431a      	orrs	r2, r3
  400a80:	68fb      	ldr	r3, [r7, #12]
  400a82:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a84:	68fb      	ldr	r3, [r7, #12]
  400a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  400a88:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a8a:	687a      	ldr	r2, [r7, #4]
  400a8c:	697b      	ldr	r3, [r7, #20]
  400a8e:	431a      	orrs	r2, r3
  400a90:	68fb      	ldr	r3, [r7, #12]
  400a92:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  400a94:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400a96:	68fb      	ldr	r3, [r7, #12]
  400a98:	687a      	ldr	r2, [r7, #4]
  400a9a:	605a      	str	r2, [r3, #4]
  400a9c:	e000      	b.n	400aa0 <pio_set_peripheral+0x106>
		return;
  400a9e:	bf00      	nop
}
  400aa0:	371c      	adds	r7, #28
  400aa2:	46bd      	mov	sp, r7
  400aa4:	bc80      	pop	{r7}
  400aa6:	4770      	bx	lr

00400aa8 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400aa8:	b580      	push	{r7, lr}
  400aaa:	b084      	sub	sp, #16
  400aac:	af00      	add	r7, sp, #0
  400aae:	60f8      	str	r0, [r7, #12]
  400ab0:	60b9      	str	r1, [r7, #8]
  400ab2:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  400ab4:	68b9      	ldr	r1, [r7, #8]
  400ab6:	68f8      	ldr	r0, [r7, #12]
  400ab8:	4b19      	ldr	r3, [pc, #100]	; (400b20 <pio_set_input+0x78>)
  400aba:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  400abc:	687b      	ldr	r3, [r7, #4]
  400abe:	f003 0301 	and.w	r3, r3, #1
  400ac2:	461a      	mov	r2, r3
  400ac4:	68b9      	ldr	r1, [r7, #8]
  400ac6:	68f8      	ldr	r0, [r7, #12]
  400ac8:	4b16      	ldr	r3, [pc, #88]	; (400b24 <pio_set_input+0x7c>)
  400aca:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400acc:	687b      	ldr	r3, [r7, #4]
  400ace:	f003 030a 	and.w	r3, r3, #10
  400ad2:	2b00      	cmp	r3, #0
  400ad4:	d003      	beq.n	400ade <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  400ad6:	68fb      	ldr	r3, [r7, #12]
  400ad8:	68ba      	ldr	r2, [r7, #8]
  400ada:	621a      	str	r2, [r3, #32]
  400adc:	e002      	b.n	400ae4 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400ade:	68fb      	ldr	r3, [r7, #12]
  400ae0:	68ba      	ldr	r2, [r7, #8]
  400ae2:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400ae4:	687b      	ldr	r3, [r7, #4]
  400ae6:	f003 0302 	and.w	r3, r3, #2
  400aea:	2b00      	cmp	r3, #0
  400aec:	d004      	beq.n	400af8 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  400aee:	68fb      	ldr	r3, [r7, #12]
  400af0:	68ba      	ldr	r2, [r7, #8]
  400af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  400af6:	e008      	b.n	400b0a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400af8:	687b      	ldr	r3, [r7, #4]
  400afa:	f003 0308 	and.w	r3, r3, #8
  400afe:	2b00      	cmp	r3, #0
  400b00:	d003      	beq.n	400b0a <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  400b02:	68fb      	ldr	r3, [r7, #12]
  400b04:	68ba      	ldr	r2, [r7, #8]
  400b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400b0a:	68fb      	ldr	r3, [r7, #12]
  400b0c:	68ba      	ldr	r2, [r7, #8]
  400b0e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  400b10:	68fb      	ldr	r3, [r7, #12]
  400b12:	68ba      	ldr	r2, [r7, #8]
  400b14:	601a      	str	r2, [r3, #0]
}
  400b16:	bf00      	nop
  400b18:	3710      	adds	r7, #16
  400b1a:	46bd      	mov	sp, r7
  400b1c:	bd80      	pop	{r7, pc}
  400b1e:	bf00      	nop
  400b20:	00400c11 	.word	0x00400c11
  400b24:	00400971 	.word	0x00400971

00400b28 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400b28:	b580      	push	{r7, lr}
  400b2a:	b084      	sub	sp, #16
  400b2c:	af00      	add	r7, sp, #0
  400b2e:	60f8      	str	r0, [r7, #12]
  400b30:	60b9      	str	r1, [r7, #8]
  400b32:	607a      	str	r2, [r7, #4]
  400b34:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  400b36:	68b9      	ldr	r1, [r7, #8]
  400b38:	68f8      	ldr	r0, [r7, #12]
  400b3a:	4b12      	ldr	r3, [pc, #72]	; (400b84 <pio_set_output+0x5c>)
  400b3c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  400b3e:	69ba      	ldr	r2, [r7, #24]
  400b40:	68b9      	ldr	r1, [r7, #8]
  400b42:	68f8      	ldr	r0, [r7, #12]
  400b44:	4b10      	ldr	r3, [pc, #64]	; (400b88 <pio_set_output+0x60>)
  400b46:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400b48:	683b      	ldr	r3, [r7, #0]
  400b4a:	2b00      	cmp	r3, #0
  400b4c:	d003      	beq.n	400b56 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  400b4e:	68fb      	ldr	r3, [r7, #12]
  400b50:	68ba      	ldr	r2, [r7, #8]
  400b52:	651a      	str	r2, [r3, #80]	; 0x50
  400b54:	e002      	b.n	400b5c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400b56:	68fb      	ldr	r3, [r7, #12]
  400b58:	68ba      	ldr	r2, [r7, #8]
  400b5a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400b5c:	687b      	ldr	r3, [r7, #4]
  400b5e:	2b00      	cmp	r3, #0
  400b60:	d003      	beq.n	400b6a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  400b62:	68fb      	ldr	r3, [r7, #12]
  400b64:	68ba      	ldr	r2, [r7, #8]
  400b66:	631a      	str	r2, [r3, #48]	; 0x30
  400b68:	e002      	b.n	400b70 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400b6a:	68fb      	ldr	r3, [r7, #12]
  400b6c:	68ba      	ldr	r2, [r7, #8]
  400b6e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400b70:	68fb      	ldr	r3, [r7, #12]
  400b72:	68ba      	ldr	r2, [r7, #8]
  400b74:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  400b76:	68fb      	ldr	r3, [r7, #12]
  400b78:	68ba      	ldr	r2, [r7, #8]
  400b7a:	601a      	str	r2, [r3, #0]
}
  400b7c:	bf00      	nop
  400b7e:	3710      	adds	r7, #16
  400b80:	46bd      	mov	sp, r7
  400b82:	bd80      	pop	{r7, pc}
  400b84:	00400c11 	.word	0x00400c11
  400b88:	00400971 	.word	0x00400971

00400b8c <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  400b8c:	b480      	push	{r7}
  400b8e:	b085      	sub	sp, #20
  400b90:	af00      	add	r7, sp, #0
  400b92:	60f8      	str	r0, [r7, #12]
  400b94:	60b9      	str	r1, [r7, #8]
  400b96:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  400b98:	687b      	ldr	r3, [r7, #4]
  400b9a:	f003 0310 	and.w	r3, r3, #16
  400b9e:	2b00      	cmp	r3, #0
  400ba0:	d020      	beq.n	400be4 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  400ba2:	68fb      	ldr	r3, [r7, #12]
  400ba4:	68ba      	ldr	r2, [r7, #8]
  400ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400baa:	687b      	ldr	r3, [r7, #4]
  400bac:	f003 0320 	and.w	r3, r3, #32
  400bb0:	2b00      	cmp	r3, #0
  400bb2:	d004      	beq.n	400bbe <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  400bb4:	68fb      	ldr	r3, [r7, #12]
  400bb6:	68ba      	ldr	r2, [r7, #8]
  400bb8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  400bbc:	e003      	b.n	400bc6 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  400bbe:	68fb      	ldr	r3, [r7, #12]
  400bc0:	68ba      	ldr	r2, [r7, #8]
  400bc2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  400bc6:	687b      	ldr	r3, [r7, #4]
  400bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  400bcc:	2b00      	cmp	r3, #0
  400bce:	d004      	beq.n	400bda <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  400bd0:	68fb      	ldr	r3, [r7, #12]
  400bd2:	68ba      	ldr	r2, [r7, #8]
  400bd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  400bd8:	e008      	b.n	400bec <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  400bda:	68fb      	ldr	r3, [r7, #12]
  400bdc:	68ba      	ldr	r2, [r7, #8]
  400bde:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  400be2:	e003      	b.n	400bec <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  400be4:	68fb      	ldr	r3, [r7, #12]
  400be6:	68ba      	ldr	r2, [r7, #8]
  400be8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  400bec:	bf00      	nop
  400bee:	3714      	adds	r7, #20
  400bf0:	46bd      	mov	sp, r7
  400bf2:	bc80      	pop	{r7}
  400bf4:	4770      	bx	lr

00400bf6 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400bf6:	b480      	push	{r7}
  400bf8:	b083      	sub	sp, #12
  400bfa:	af00      	add	r7, sp, #0
  400bfc:	6078      	str	r0, [r7, #4]
  400bfe:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  400c00:	687b      	ldr	r3, [r7, #4]
  400c02:	683a      	ldr	r2, [r7, #0]
  400c04:	641a      	str	r2, [r3, #64]	; 0x40
}
  400c06:	bf00      	nop
  400c08:	370c      	adds	r7, #12
  400c0a:	46bd      	mov	sp, r7
  400c0c:	bc80      	pop	{r7}
  400c0e:	4770      	bx	lr

00400c10 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  400c10:	b480      	push	{r7}
  400c12:	b083      	sub	sp, #12
  400c14:	af00      	add	r7, sp, #0
  400c16:	6078      	str	r0, [r7, #4]
  400c18:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  400c1a:	687b      	ldr	r3, [r7, #4]
  400c1c:	683a      	ldr	r2, [r7, #0]
  400c1e:	645a      	str	r2, [r3, #68]	; 0x44
}
  400c20:	bf00      	nop
  400c22:	370c      	adds	r7, #12
  400c24:	46bd      	mov	sp, r7
  400c26:	bc80      	pop	{r7}
  400c28:	4770      	bx	lr

00400c2a <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  400c2a:	b480      	push	{r7}
  400c2c:	b083      	sub	sp, #12
  400c2e:	af00      	add	r7, sp, #0
  400c30:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  400c32:	687b      	ldr	r3, [r7, #4]
  400c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  400c36:	4618      	mov	r0, r3
  400c38:	370c      	adds	r7, #12
  400c3a:	46bd      	mov	sp, r7
  400c3c:	bc80      	pop	{r7}
  400c3e:	4770      	bx	lr

00400c40 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  400c40:	b480      	push	{r7}
  400c42:	b083      	sub	sp, #12
  400c44:	af00      	add	r7, sp, #0
  400c46:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  400c48:	687b      	ldr	r3, [r7, #4]
  400c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  400c4c:	4618      	mov	r0, r3
  400c4e:	370c      	adds	r7, #12
  400c50:	46bd      	mov	sp, r7
  400c52:	bc80      	pop	{r7}
  400c54:	4770      	bx	lr
	...

00400c58 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400c58:	b590      	push	{r4, r7, lr}
  400c5a:	b087      	sub	sp, #28
  400c5c:	af02      	add	r7, sp, #8
  400c5e:	6078      	str	r0, [r7, #4]
  400c60:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  400c62:	6878      	ldr	r0, [r7, #4]
  400c64:	4b63      	ldr	r3, [pc, #396]	; (400df4 <pio_configure_pin+0x19c>)
  400c66:	4798      	blx	r3
  400c68:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400c6a:	683b      	ldr	r3, [r7, #0]
  400c6c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  400c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400c74:	d067      	beq.n	400d46 <pio_configure_pin+0xee>
  400c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400c7a:	d809      	bhi.n	400c90 <pio_configure_pin+0x38>
  400c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400c80:	d02b      	beq.n	400cda <pio_configure_pin+0x82>
  400c82:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400c86:	d043      	beq.n	400d10 <pio_configure_pin+0xb8>
  400c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400c8c:	d00a      	beq.n	400ca4 <pio_configure_pin+0x4c>
  400c8e:	e0a9      	b.n	400de4 <pio_configure_pin+0x18c>
  400c90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400c94:	d07e      	beq.n	400d94 <pio_configure_pin+0x13c>
  400c96:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400c9a:	d07b      	beq.n	400d94 <pio_configure_pin+0x13c>
  400c9c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400ca0:	d06c      	beq.n	400d7c <pio_configure_pin+0x124>
  400ca2:	e09f      	b.n	400de4 <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400ca4:	687b      	ldr	r3, [r7, #4]
  400ca6:	f003 031f 	and.w	r3, r3, #31
  400caa:	2201      	movs	r2, #1
  400cac:	fa02 f303 	lsl.w	r3, r2, r3
  400cb0:	461a      	mov	r2, r3
  400cb2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400cb6:	68f8      	ldr	r0, [r7, #12]
  400cb8:	4b4f      	ldr	r3, [pc, #316]	; (400df8 <pio_configure_pin+0x1a0>)
  400cba:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400cbc:	687b      	ldr	r3, [r7, #4]
  400cbe:	f003 031f 	and.w	r3, r3, #31
  400cc2:	2201      	movs	r2, #1
  400cc4:	fa02 f303 	lsl.w	r3, r2, r3
  400cc8:	4619      	mov	r1, r3
  400cca:	683b      	ldr	r3, [r7, #0]
  400ccc:	f003 0301 	and.w	r3, r3, #1
  400cd0:	461a      	mov	r2, r3
  400cd2:	68f8      	ldr	r0, [r7, #12]
  400cd4:	4b49      	ldr	r3, [pc, #292]	; (400dfc <pio_configure_pin+0x1a4>)
  400cd6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400cd8:	e086      	b.n	400de8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400cda:	687b      	ldr	r3, [r7, #4]
  400cdc:	f003 031f 	and.w	r3, r3, #31
  400ce0:	2201      	movs	r2, #1
  400ce2:	fa02 f303 	lsl.w	r3, r2, r3
  400ce6:	461a      	mov	r2, r3
  400ce8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400cec:	68f8      	ldr	r0, [r7, #12]
  400cee:	4b42      	ldr	r3, [pc, #264]	; (400df8 <pio_configure_pin+0x1a0>)
  400cf0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400cf2:	687b      	ldr	r3, [r7, #4]
  400cf4:	f003 031f 	and.w	r3, r3, #31
  400cf8:	2201      	movs	r2, #1
  400cfa:	fa02 f303 	lsl.w	r3, r2, r3
  400cfe:	4619      	mov	r1, r3
  400d00:	683b      	ldr	r3, [r7, #0]
  400d02:	f003 0301 	and.w	r3, r3, #1
  400d06:	461a      	mov	r2, r3
  400d08:	68f8      	ldr	r0, [r7, #12]
  400d0a:	4b3c      	ldr	r3, [pc, #240]	; (400dfc <pio_configure_pin+0x1a4>)
  400d0c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400d0e:	e06b      	b.n	400de8 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400d10:	687b      	ldr	r3, [r7, #4]
  400d12:	f003 031f 	and.w	r3, r3, #31
  400d16:	2201      	movs	r2, #1
  400d18:	fa02 f303 	lsl.w	r3, r2, r3
  400d1c:	461a      	mov	r2, r3
  400d1e:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400d22:	68f8      	ldr	r0, [r7, #12]
  400d24:	4b34      	ldr	r3, [pc, #208]	; (400df8 <pio_configure_pin+0x1a0>)
  400d26:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400d28:	687b      	ldr	r3, [r7, #4]
  400d2a:	f003 031f 	and.w	r3, r3, #31
  400d2e:	2201      	movs	r2, #1
  400d30:	fa02 f303 	lsl.w	r3, r2, r3
  400d34:	4619      	mov	r1, r3
  400d36:	683b      	ldr	r3, [r7, #0]
  400d38:	f003 0301 	and.w	r3, r3, #1
  400d3c:	461a      	mov	r2, r3
  400d3e:	68f8      	ldr	r0, [r7, #12]
  400d40:	4b2e      	ldr	r3, [pc, #184]	; (400dfc <pio_configure_pin+0x1a4>)
  400d42:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400d44:	e050      	b.n	400de8 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400d46:	687b      	ldr	r3, [r7, #4]
  400d48:	f003 031f 	and.w	r3, r3, #31
  400d4c:	2201      	movs	r2, #1
  400d4e:	fa02 f303 	lsl.w	r3, r2, r3
  400d52:	461a      	mov	r2, r3
  400d54:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400d58:	68f8      	ldr	r0, [r7, #12]
  400d5a:	4b27      	ldr	r3, [pc, #156]	; (400df8 <pio_configure_pin+0x1a0>)
  400d5c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400d5e:	687b      	ldr	r3, [r7, #4]
  400d60:	f003 031f 	and.w	r3, r3, #31
  400d64:	2201      	movs	r2, #1
  400d66:	fa02 f303 	lsl.w	r3, r2, r3
  400d6a:	4619      	mov	r1, r3
  400d6c:	683b      	ldr	r3, [r7, #0]
  400d6e:	f003 0301 	and.w	r3, r3, #1
  400d72:	461a      	mov	r2, r3
  400d74:	68f8      	ldr	r0, [r7, #12]
  400d76:	4b21      	ldr	r3, [pc, #132]	; (400dfc <pio_configure_pin+0x1a4>)
  400d78:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  400d7a:	e035      	b.n	400de8 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400d7c:	687b      	ldr	r3, [r7, #4]
  400d7e:	f003 031f 	and.w	r3, r3, #31
  400d82:	2201      	movs	r2, #1
  400d84:	fa02 f303 	lsl.w	r3, r2, r3
  400d88:	683a      	ldr	r2, [r7, #0]
  400d8a:	4619      	mov	r1, r3
  400d8c:	68f8      	ldr	r0, [r7, #12]
  400d8e:	4b1c      	ldr	r3, [pc, #112]	; (400e00 <pio_configure_pin+0x1a8>)
  400d90:	4798      	blx	r3
		break;
  400d92:	e029      	b.n	400de8 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400d94:	687b      	ldr	r3, [r7, #4]
  400d96:	f003 031f 	and.w	r3, r3, #31
  400d9a:	2201      	movs	r2, #1
  400d9c:	fa02 f303 	lsl.w	r3, r2, r3
  400da0:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400da2:	683b      	ldr	r3, [r7, #0]
  400da4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400da8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400dac:	bf0c      	ite	eq
  400dae:	2301      	moveq	r3, #1
  400db0:	2300      	movne	r3, #0
  400db2:	b2db      	uxtb	r3, r3
  400db4:	461a      	mov	r2, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  400db6:	683b      	ldr	r3, [r7, #0]
  400db8:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400dbc:	2b00      	cmp	r3, #0
  400dbe:	bf14      	ite	ne
  400dc0:	2301      	movne	r3, #1
  400dc2:	2300      	moveq	r3, #0
  400dc4:	b2db      	uxtb	r3, r3
  400dc6:	4618      	mov	r0, r3
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  400dc8:	683b      	ldr	r3, [r7, #0]
  400dca:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400dce:	2b00      	cmp	r3, #0
  400dd0:	bf14      	ite	ne
  400dd2:	2301      	movne	r3, #1
  400dd4:	2300      	moveq	r3, #0
  400dd6:	b2db      	uxtb	r3, r3
  400dd8:	9300      	str	r3, [sp, #0]
  400dda:	4603      	mov	r3, r0
  400ddc:	68f8      	ldr	r0, [r7, #12]
  400dde:	4c09      	ldr	r4, [pc, #36]	; (400e04 <pio_configure_pin+0x1ac>)
  400de0:	47a0      	blx	r4
		break;
  400de2:	e001      	b.n	400de8 <pio_configure_pin+0x190>

	default:
		return 0;
  400de4:	2300      	movs	r3, #0
  400de6:	e000      	b.n	400dea <pio_configure_pin+0x192>
	}

	return 1;
  400de8:	2301      	movs	r3, #1
}
  400dea:	4618      	mov	r0, r3
  400dec:	3714      	adds	r7, #20
  400dee:	46bd      	mov	sp, r7
  400df0:	bd90      	pop	{r4, r7, pc}
  400df2:	bf00      	nop
  400df4:	00400e09 	.word	0x00400e09
  400df8:	0040099b 	.word	0x0040099b
  400dfc:	00400971 	.word	0x00400971
  400e00:	00400aa9 	.word	0x00400aa9
  400e04:	00400b29 	.word	0x00400b29

00400e08 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  400e08:	b480      	push	{r7}
  400e0a:	b085      	sub	sp, #20
  400e0c:	af00      	add	r7, sp, #0
  400e0e:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400e10:	687b      	ldr	r3, [r7, #4]
  400e12:	095b      	lsrs	r3, r3, #5
  400e14:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400e18:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400e1c:	025b      	lsls	r3, r3, #9
  400e1e:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  400e20:	68fb      	ldr	r3, [r7, #12]
}
  400e22:	4618      	mov	r0, r3
  400e24:	3714      	adds	r7, #20
  400e26:	46bd      	mov	sp, r7
  400e28:	bc80      	pop	{r7}
  400e2a:	4770      	bx	lr

00400e2c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  400e2c:	b480      	push	{r7}
  400e2e:	b085      	sub	sp, #20
  400e30:	af00      	add	r7, sp, #0
  400e32:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400e34:	491c      	ldr	r1, [pc, #112]	; (400ea8 <pmc_switch_mck_to_pllack+0x7c>)
  400e36:	4b1c      	ldr	r3, [pc, #112]	; (400ea8 <pmc_switch_mck_to_pllack+0x7c>)
  400e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  400e3e:	687b      	ldr	r3, [r7, #4]
  400e40:	4313      	orrs	r3, r2
  400e42:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e44:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e48:	60fb      	str	r3, [r7, #12]
  400e4a:	e007      	b.n	400e5c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e4c:	68fb      	ldr	r3, [r7, #12]
  400e4e:	2b00      	cmp	r3, #0
  400e50:	d101      	bne.n	400e56 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  400e52:	2301      	movs	r3, #1
  400e54:	e023      	b.n	400e9e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400e56:	68fb      	ldr	r3, [r7, #12]
  400e58:	3b01      	subs	r3, #1
  400e5a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e5c:	4b12      	ldr	r3, [pc, #72]	; (400ea8 <pmc_switch_mck_to_pllack+0x7c>)
  400e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e60:	f003 0308 	and.w	r3, r3, #8
  400e64:	2b00      	cmp	r3, #0
  400e66:	d0f1      	beq.n	400e4c <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400e68:	4a0f      	ldr	r2, [pc, #60]	; (400ea8 <pmc_switch_mck_to_pllack+0x7c>)
  400e6a:	4b0f      	ldr	r3, [pc, #60]	; (400ea8 <pmc_switch_mck_to_pllack+0x7c>)
  400e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e6e:	f023 0303 	bic.w	r3, r3, #3
  400e72:	f043 0302 	orr.w	r3, r3, #2
  400e76:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400e7c:	60fb      	str	r3, [r7, #12]
  400e7e:	e007      	b.n	400e90 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400e80:	68fb      	ldr	r3, [r7, #12]
  400e82:	2b00      	cmp	r3, #0
  400e84:	d101      	bne.n	400e8a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  400e86:	2301      	movs	r3, #1
  400e88:	e009      	b.n	400e9e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  400e8a:	68fb      	ldr	r3, [r7, #12]
  400e8c:	3b01      	subs	r3, #1
  400e8e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400e90:	4b05      	ldr	r3, [pc, #20]	; (400ea8 <pmc_switch_mck_to_pllack+0x7c>)
  400e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400e94:	f003 0308 	and.w	r3, r3, #8
  400e98:	2b00      	cmp	r3, #0
  400e9a:	d0f1      	beq.n	400e80 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  400e9c:	2300      	movs	r3, #0
}
  400e9e:	4618      	mov	r0, r3
  400ea0:	3714      	adds	r7, #20
  400ea2:	46bd      	mov	sp, r7
  400ea4:	bc80      	pop	{r7}
  400ea6:	4770      	bx	lr
  400ea8:	400e0400 	.word	0x400e0400

00400eac <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  400eac:	b480      	push	{r7}
  400eae:	b083      	sub	sp, #12
  400eb0:	af00      	add	r7, sp, #0
  400eb2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400eb4:	687b      	ldr	r3, [r7, #4]
  400eb6:	2b01      	cmp	r3, #1
  400eb8:	d107      	bne.n	400eca <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  400eba:	4a08      	ldr	r2, [pc, #32]	; (400edc <pmc_switch_sclk_to_32kxtal+0x30>)
  400ebc:	4b07      	ldr	r3, [pc, #28]	; (400edc <pmc_switch_sclk_to_32kxtal+0x30>)
  400ebe:	689b      	ldr	r3, [r3, #8]
  400ec0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  400ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400ec8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400eca:	4b04      	ldr	r3, [pc, #16]	; (400edc <pmc_switch_sclk_to_32kxtal+0x30>)
  400ecc:	4a04      	ldr	r2, [pc, #16]	; (400ee0 <pmc_switch_sclk_to_32kxtal+0x34>)
  400ece:	601a      	str	r2, [r3, #0]
}
  400ed0:	bf00      	nop
  400ed2:	370c      	adds	r7, #12
  400ed4:	46bd      	mov	sp, r7
  400ed6:	bc80      	pop	{r7}
  400ed8:	4770      	bx	lr
  400eda:	bf00      	nop
  400edc:	400e1410 	.word	0x400e1410
  400ee0:	a5000008 	.word	0xa5000008

00400ee4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  400ee4:	b480      	push	{r7}
  400ee6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  400ee8:	4b09      	ldr	r3, [pc, #36]	; (400f10 <pmc_osc_is_ready_32kxtal+0x2c>)
  400eea:	695b      	ldr	r3, [r3, #20]
  400eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  400ef0:	2b00      	cmp	r3, #0
  400ef2:	d007      	beq.n	400f04 <pmc_osc_is_ready_32kxtal+0x20>
  400ef4:	4b07      	ldr	r3, [pc, #28]	; (400f14 <pmc_osc_is_ready_32kxtal+0x30>)
  400ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400efc:	2b00      	cmp	r3, #0
  400efe:	d001      	beq.n	400f04 <pmc_osc_is_ready_32kxtal+0x20>
  400f00:	2301      	movs	r3, #1
  400f02:	e000      	b.n	400f06 <pmc_osc_is_ready_32kxtal+0x22>
  400f04:	2300      	movs	r3, #0
}
  400f06:	4618      	mov	r0, r3
  400f08:	46bd      	mov	sp, r7
  400f0a:	bc80      	pop	{r7}
  400f0c:	4770      	bx	lr
  400f0e:	bf00      	nop
  400f10:	400e1410 	.word	0x400e1410
  400f14:	400e0400 	.word	0x400e0400

00400f18 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  400f18:	b480      	push	{r7}
  400f1a:	b083      	sub	sp, #12
  400f1c:	af00      	add	r7, sp, #0
  400f1e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400f20:	4a18      	ldr	r2, [pc, #96]	; (400f84 <pmc_switch_mainck_to_fastrc+0x6c>)
  400f22:	4b18      	ldr	r3, [pc, #96]	; (400f84 <pmc_switch_mainck_to_fastrc+0x6c>)
  400f24:	6a1b      	ldr	r3, [r3, #32]
  400f26:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400f2a:	f043 0308 	orr.w	r3, r3, #8
  400f2e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400f30:	bf00      	nop
  400f32:	4b14      	ldr	r3, [pc, #80]	; (400f84 <pmc_switch_mainck_to_fastrc+0x6c>)
  400f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400f3a:	2b00      	cmp	r3, #0
  400f3c:	d0f9      	beq.n	400f32 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400f3e:	4911      	ldr	r1, [pc, #68]	; (400f84 <pmc_switch_mainck_to_fastrc+0x6c>)
  400f40:	4b10      	ldr	r3, [pc, #64]	; (400f84 <pmc_switch_mainck_to_fastrc+0x6c>)
  400f42:	6a1b      	ldr	r3, [r3, #32]
  400f44:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400f4c:	687a      	ldr	r2, [r7, #4]
  400f4e:	4313      	orrs	r3, r2
  400f50:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400f54:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400f56:	bf00      	nop
  400f58:	4b0a      	ldr	r3, [pc, #40]	; (400f84 <pmc_switch_mainck_to_fastrc+0x6c>)
  400f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  400f60:	2b00      	cmp	r3, #0
  400f62:	d0f9      	beq.n	400f58 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400f64:	4a07      	ldr	r2, [pc, #28]	; (400f84 <pmc_switch_mainck_to_fastrc+0x6c>)
  400f66:	4b07      	ldr	r3, [pc, #28]	; (400f84 <pmc_switch_mainck_to_fastrc+0x6c>)
  400f68:	6a1b      	ldr	r3, [r3, #32]
  400f6a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  400f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400f72:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400f76:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  400f78:	bf00      	nop
  400f7a:	370c      	adds	r7, #12
  400f7c:	46bd      	mov	sp, r7
  400f7e:	bc80      	pop	{r7}
  400f80:	4770      	bx	lr
  400f82:	bf00      	nop
  400f84:	400e0400 	.word	0x400e0400

00400f88 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  400f88:	b480      	push	{r7}
  400f8a:	b083      	sub	sp, #12
  400f8c:	af00      	add	r7, sp, #0
  400f8e:	6078      	str	r0, [r7, #4]
  400f90:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400f92:	687b      	ldr	r3, [r7, #4]
  400f94:	2b00      	cmp	r3, #0
  400f96:	d008      	beq.n	400faa <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f98:	4916      	ldr	r1, [pc, #88]	; (400ff4 <pmc_switch_mainck_to_xtal+0x6c>)
  400f9a:	4b16      	ldr	r3, [pc, #88]	; (400ff4 <pmc_switch_mainck_to_xtal+0x6c>)
  400f9c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400f9e:	4a16      	ldr	r2, [pc, #88]	; (400ff8 <pmc_switch_mainck_to_xtal+0x70>)
  400fa0:	401a      	ands	r2, r3
  400fa2:	4b16      	ldr	r3, [pc, #88]	; (400ffc <pmc_switch_mainck_to_xtal+0x74>)
  400fa4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fa6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  400fa8:	e01e      	b.n	400fe8 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400faa:	4912      	ldr	r1, [pc, #72]	; (400ff4 <pmc_switch_mainck_to_xtal+0x6c>)
  400fac:	4b11      	ldr	r3, [pc, #68]	; (400ff4 <pmc_switch_mainck_to_xtal+0x6c>)
  400fae:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400fb0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400fb4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400fb8:	683a      	ldr	r2, [r7, #0]
  400fba:	0212      	lsls	r2, r2, #8
  400fbc:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400fbe:	4313      	orrs	r3, r2
  400fc0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400fc4:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400fc8:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400fca:	bf00      	nop
  400fcc:	4b09      	ldr	r3, [pc, #36]	; (400ff4 <pmc_switch_mainck_to_xtal+0x6c>)
  400fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400fd0:	f003 0301 	and.w	r3, r3, #1
  400fd4:	2b00      	cmp	r3, #0
  400fd6:	d0f9      	beq.n	400fcc <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400fd8:	4a06      	ldr	r2, [pc, #24]	; (400ff4 <pmc_switch_mainck_to_xtal+0x6c>)
  400fda:	4b06      	ldr	r3, [pc, #24]	; (400ff4 <pmc_switch_mainck_to_xtal+0x6c>)
  400fdc:	6a1b      	ldr	r3, [r3, #32]
  400fde:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400fe6:	6213      	str	r3, [r2, #32]
}
  400fe8:	bf00      	nop
  400fea:	370c      	adds	r7, #12
  400fec:	46bd      	mov	sp, r7
  400fee:	bc80      	pop	{r7}
  400ff0:	4770      	bx	lr
  400ff2:	bf00      	nop
  400ff4:	400e0400 	.word	0x400e0400
  400ff8:	fec8fffc 	.word	0xfec8fffc
  400ffc:	01370002 	.word	0x01370002

00401000 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401000:	b480      	push	{r7}
  401002:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401004:	4b03      	ldr	r3, [pc, #12]	; (401014 <pmc_osc_is_ready_mainck+0x14>)
  401006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  40100c:	4618      	mov	r0, r3
  40100e:	46bd      	mov	sp, r7
  401010:	bc80      	pop	{r7}
  401012:	4770      	bx	lr
  401014:	400e0400 	.word	0x400e0400

00401018 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  401018:	b480      	push	{r7}
  40101a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40101c:	4b03      	ldr	r3, [pc, #12]	; (40102c <pmc_disable_pllack+0x14>)
  40101e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401022:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401024:	bf00      	nop
  401026:	46bd      	mov	sp, r7
  401028:	bc80      	pop	{r7}
  40102a:	4770      	bx	lr
  40102c:	400e0400 	.word	0x400e0400

00401030 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401030:	b480      	push	{r7}
  401032:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401034:	4b03      	ldr	r3, [pc, #12]	; (401044 <pmc_is_locked_pllack+0x14>)
  401036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401038:	f003 0302 	and.w	r3, r3, #2
}
  40103c:	4618      	mov	r0, r3
  40103e:	46bd      	mov	sp, r7
  401040:	bc80      	pop	{r7}
  401042:	4770      	bx	lr
  401044:	400e0400 	.word	0x400e0400

00401048 <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  401048:	b480      	push	{r7}
  40104a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  40104c:	4b03      	ldr	r3, [pc, #12]	; (40105c <pmc_disable_pllbck+0x14>)
  40104e:	2200      	movs	r2, #0
  401050:	62da      	str	r2, [r3, #44]	; 0x2c
}
  401052:	bf00      	nop
  401054:	46bd      	mov	sp, r7
  401056:	bc80      	pop	{r7}
  401058:	4770      	bx	lr
  40105a:	bf00      	nop
  40105c:	400e0400 	.word	0x400e0400

00401060 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401060:	b480      	push	{r7}
  401062:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401064:	4b03      	ldr	r3, [pc, #12]	; (401074 <pmc_is_locked_pllbck+0x14>)
  401066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401068:	f003 0304 	and.w	r3, r3, #4
}
  40106c:	4618      	mov	r0, r3
  40106e:	46bd      	mov	sp, r7
  401070:	bc80      	pop	{r7}
  401072:	4770      	bx	lr
  401074:	400e0400 	.word	0x400e0400

00401078 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401078:	b480      	push	{r7}
  40107a:	b083      	sub	sp, #12
  40107c:	af00      	add	r7, sp, #0
  40107e:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  401080:	687b      	ldr	r3, [r7, #4]
  401082:	2b22      	cmp	r3, #34	; 0x22
  401084:	d901      	bls.n	40108a <pmc_enable_periph_clk+0x12>
		return 1;
  401086:	2301      	movs	r3, #1
  401088:	e02f      	b.n	4010ea <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40108a:	687b      	ldr	r3, [r7, #4]
  40108c:	2b1f      	cmp	r3, #31
  40108e:	d813      	bhi.n	4010b8 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401090:	4b18      	ldr	r3, [pc, #96]	; (4010f4 <pmc_enable_periph_clk+0x7c>)
  401092:	699a      	ldr	r2, [r3, #24]
  401094:	2101      	movs	r1, #1
  401096:	687b      	ldr	r3, [r7, #4]
  401098:	fa01 f303 	lsl.w	r3, r1, r3
  40109c:	401a      	ands	r2, r3
  40109e:	2101      	movs	r1, #1
  4010a0:	687b      	ldr	r3, [r7, #4]
  4010a2:	fa01 f303 	lsl.w	r3, r1, r3
  4010a6:	429a      	cmp	r2, r3
  4010a8:	d01e      	beq.n	4010e8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4010aa:	4a12      	ldr	r2, [pc, #72]	; (4010f4 <pmc_enable_periph_clk+0x7c>)
  4010ac:	2101      	movs	r1, #1
  4010ae:	687b      	ldr	r3, [r7, #4]
  4010b0:	fa01 f303 	lsl.w	r3, r1, r3
  4010b4:	6113      	str	r3, [r2, #16]
  4010b6:	e017      	b.n	4010e8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4010b8:	687b      	ldr	r3, [r7, #4]
  4010ba:	3b20      	subs	r3, #32
  4010bc:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4010be:	4b0d      	ldr	r3, [pc, #52]	; (4010f4 <pmc_enable_periph_clk+0x7c>)
  4010c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4010c4:	2101      	movs	r1, #1
  4010c6:	687b      	ldr	r3, [r7, #4]
  4010c8:	fa01 f303 	lsl.w	r3, r1, r3
  4010cc:	401a      	ands	r2, r3
  4010ce:	2101      	movs	r1, #1
  4010d0:	687b      	ldr	r3, [r7, #4]
  4010d2:	fa01 f303 	lsl.w	r3, r1, r3
  4010d6:	429a      	cmp	r2, r3
  4010d8:	d006      	beq.n	4010e8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4010da:	4a06      	ldr	r2, [pc, #24]	; (4010f4 <pmc_enable_periph_clk+0x7c>)
  4010dc:	2101      	movs	r1, #1
  4010de:	687b      	ldr	r3, [r7, #4]
  4010e0:	fa01 f303 	lsl.w	r3, r1, r3
  4010e4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4010e8:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4010ea:	4618      	mov	r0, r3
  4010ec:	370c      	adds	r7, #12
  4010ee:	46bd      	mov	sp, r7
  4010f0:	bc80      	pop	{r7}
  4010f2:	4770      	bx	lr
  4010f4:	400e0400 	.word	0x400e0400

004010f8 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  4010f8:	b480      	push	{r7}
  4010fa:	b083      	sub	sp, #12
  4010fc:	af00      	add	r7, sp, #0
  4010fe:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401100:	687b      	ldr	r3, [r7, #4]
  401102:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401106:	605a      	str	r2, [r3, #4]

}
  401108:	bf00      	nop
  40110a:	370c      	adds	r7, #12
  40110c:	46bd      	mov	sp, r7
  40110e:	bc80      	pop	{r7}
  401110:	4770      	bx	lr
	...

00401114 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  401114:	b580      	push	{r7, lr}
  401116:	b082      	sub	sp, #8
  401118:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  40111a:	2100      	movs	r1, #0
  40111c:	4809      	ldr	r0, [pc, #36]	; (401144 <TC0_Handler+0x30>)
  40111e:	4b0a      	ldr	r3, [pc, #40]	; (401148 <TC0_Handler+0x34>)
  401120:	4798      	blx	r3
  401122:	6078      	str	r0, [r7, #4]

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  401124:	687b      	ldr	r3, [r7, #4]
  401126:	f003 0310 	and.w	r3, r3, #16
  40112a:	2b00      	cmp	r3, #0
  40112c:	d006      	beq.n	40113c <TC0_Handler+0x28>
		counts++;
  40112e:	4b07      	ldr	r3, [pc, #28]	; (40114c <TC0_Handler+0x38>)
  401130:	781b      	ldrb	r3, [r3, #0]
  401132:	b2db      	uxtb	r3, r3
  401134:	3301      	adds	r3, #1
  401136:	b2da      	uxtb	r2, r3
  401138:	4b04      	ldr	r3, [pc, #16]	; (40114c <TC0_Handler+0x38>)
  40113a:	701a      	strb	r2, [r3, #0]
	}
}
  40113c:	bf00      	nop
  40113e:	3708      	adds	r7, #8
  401140:	46bd      	mov	sp, r7
  401142:	bd80      	pop	{r7, pc}
  401144:	40010000 	.word	0x40010000
  401148:	004002dd 	.word	0x004002dd
  40114c:	200004e8 	.word	0x200004e8

00401150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  401150:	b480      	push	{r7}
  401152:	b083      	sub	sp, #12
  401154:	af00      	add	r7, sp, #0
  401156:	4603      	mov	r3, r0
  401158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  40115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40115e:	2b00      	cmp	r3, #0
  401160:	db0b      	blt.n	40117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401162:	4908      	ldr	r1, [pc, #32]	; (401184 <__NVIC_EnableIRQ+0x34>)
  401164:	f997 3007 	ldrsb.w	r3, [r7, #7]
  401168:	095b      	lsrs	r3, r3, #5
  40116a:	79fa      	ldrb	r2, [r7, #7]
  40116c:	f002 021f 	and.w	r2, r2, #31
  401170:	2001      	movs	r0, #1
  401172:	fa00 f202 	lsl.w	r2, r0, r2
  401176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  40117a:	bf00      	nop
  40117c:	370c      	adds	r7, #12
  40117e:	46bd      	mov	sp, r7
  401180:	bc80      	pop	{r7}
  401182:	4770      	bx	lr
  401184:	e000e100 	.word	0xe000e100

00401188 <osc_get_rate>:
{
  401188:	b480      	push	{r7}
  40118a:	b083      	sub	sp, #12
  40118c:	af00      	add	r7, sp, #0
  40118e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401190:	687b      	ldr	r3, [r7, #4]
  401192:	2b07      	cmp	r3, #7
  401194:	d825      	bhi.n	4011e2 <osc_get_rate+0x5a>
  401196:	a201      	add	r2, pc, #4	; (adr r2, 40119c <osc_get_rate+0x14>)
  401198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40119c:	004011bd 	.word	0x004011bd
  4011a0:	004011c3 	.word	0x004011c3
  4011a4:	004011c9 	.word	0x004011c9
  4011a8:	004011cf 	.word	0x004011cf
  4011ac:	004011d3 	.word	0x004011d3
  4011b0:	004011d7 	.word	0x004011d7
  4011b4:	004011db 	.word	0x004011db
  4011b8:	004011df 	.word	0x004011df
		return OSC_SLCK_32K_RC_HZ;
  4011bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4011c0:	e010      	b.n	4011e4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4011c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4011c6:	e00d      	b.n	4011e4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4011c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4011cc:	e00a      	b.n	4011e4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4011ce:	4b08      	ldr	r3, [pc, #32]	; (4011f0 <osc_get_rate+0x68>)
  4011d0:	e008      	b.n	4011e4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4011d2:	4b08      	ldr	r3, [pc, #32]	; (4011f4 <osc_get_rate+0x6c>)
  4011d4:	e006      	b.n	4011e4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4011d6:	4b08      	ldr	r3, [pc, #32]	; (4011f8 <osc_get_rate+0x70>)
  4011d8:	e004      	b.n	4011e4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4011da:	4b07      	ldr	r3, [pc, #28]	; (4011f8 <osc_get_rate+0x70>)
  4011dc:	e002      	b.n	4011e4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4011de:	4b06      	ldr	r3, [pc, #24]	; (4011f8 <osc_get_rate+0x70>)
  4011e0:	e000      	b.n	4011e4 <osc_get_rate+0x5c>
	return 0;
  4011e2:	2300      	movs	r3, #0
}
  4011e4:	4618      	mov	r0, r3
  4011e6:	370c      	adds	r7, #12
  4011e8:	46bd      	mov	sp, r7
  4011ea:	bc80      	pop	{r7}
  4011ec:	4770      	bx	lr
  4011ee:	bf00      	nop
  4011f0:	003d0900 	.word	0x003d0900
  4011f4:	007a1200 	.word	0x007a1200
  4011f8:	00b71b00 	.word	0x00b71b00

004011fc <sysclk_get_main_hz>:
{
  4011fc:	b580      	push	{r7, lr}
  4011fe:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401200:	2006      	movs	r0, #6
  401202:	4b04      	ldr	r3, [pc, #16]	; (401214 <sysclk_get_main_hz+0x18>)
  401204:	4798      	blx	r3
  401206:	4602      	mov	r2, r0
  401208:	4613      	mov	r3, r2
  40120a:	009b      	lsls	r3, r3, #2
  40120c:	4413      	add	r3, r2
  40120e:	009b      	lsls	r3, r3, #2
}
  401210:	4618      	mov	r0, r3
  401212:	bd80      	pop	{r7, pc}
  401214:	00401189 	.word	0x00401189

00401218 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  401218:	b580      	push	{r7, lr}
  40121a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40121c:	4b02      	ldr	r3, [pc, #8]	; (401228 <sysclk_get_peripheral_hz+0x10>)
  40121e:	4798      	blx	r3
  401220:	4603      	mov	r3, r0
  401222:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  401224:	4618      	mov	r0, r3
  401226:	bd80      	pop	{r7, pc}
  401228:	004011fd 	.word	0x004011fd

0040122c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40122c:	b580      	push	{r7, lr}
  40122e:	b082      	sub	sp, #8
  401230:	af00      	add	r7, sp, #0
  401232:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401234:	6878      	ldr	r0, [r7, #4]
  401236:	4b03      	ldr	r3, [pc, #12]	; (401244 <sysclk_enable_peripheral_clock+0x18>)
  401238:	4798      	blx	r3
}
  40123a:	bf00      	nop
  40123c:	3708      	adds	r7, #8
  40123e:	46bd      	mov	sp, r7
  401240:	bd80      	pop	{r7, pc}
  401242:	bf00      	nop
  401244:	00401079 	.word	0x00401079

00401248 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
  401248:	b480      	push	{r7}
  40124a:	b08b      	sub	sp, #44	; 0x2c
  40124c:	af00      	add	r7, sp, #0
  40124e:	6078      	str	r0, [r7, #4]
  401250:	687b      	ldr	r3, [r7, #4]
  401252:	627b      	str	r3, [r7, #36]	; 0x24
  401254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401256:	623b      	str	r3, [r7, #32]
  401258:	6a3b      	ldr	r3, [r7, #32]
  40125a:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40125c:	69fb      	ldr	r3, [r7, #28]
  40125e:	095b      	lsrs	r3, r3, #5
  401260:	61bb      	str	r3, [r7, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401262:	69bb      	ldr	r3, [r7, #24]
  401264:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401268:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40126c:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
  40126e:	617b      	str	r3, [r7, #20]
  401270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401272:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401274:	693b      	ldr	r3, [r7, #16]
  401276:	f003 031f 	and.w	r3, r3, #31
  40127a:	2201      	movs	r2, #1
  40127c:	fa02 f303 	lsl.w	r3, r2, r3
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
  401280:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401282:	697b      	ldr	r3, [r7, #20]
  401284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  401286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401288:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40128a:	68bb      	ldr	r3, [r7, #8]
  40128c:	f003 031f 	and.w	r3, r3, #31
  401290:	2101      	movs	r1, #1
  401292:	fa01 f303 	lsl.w	r3, r1, r3
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  401296:	4013      	ands	r3, r2
  401298:	2b00      	cmp	r3, #0
  40129a:	d003      	beq.n	4012a4 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
  40129c:	697b      	ldr	r3, [r7, #20]
  40129e:	68fa      	ldr	r2, [r7, #12]
  4012a0:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
  4012a2:	e002      	b.n	4012aa <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
  4012a4:	697b      	ldr	r3, [r7, #20]
  4012a6:	68fa      	ldr	r2, [r7, #12]
  4012a8:	631a      	str	r2, [r3, #48]	; 0x30
  4012aa:	bf00      	nop
  4012ac:	372c      	adds	r7, #44	; 0x2c
  4012ae:	46bd      	mov	sp, r7
  4012b0:	bc80      	pop	{r7}
  4012b2:	4770      	bx	lr

004012b4 <USART0_Handler>:
volatile bool new_rx_wifi = false;
volatile unsigned int input_pos_wifi = 0;
volatile bool wifi_comm_success = false;

void wifi_usart_handler(void)
{
  4012b4:	b580      	push	{r7, lr}
  4012b6:	b082      	sub	sp, #8
  4012b8:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read USART status. */
	ul_status = usart_get_status(WIFI_USART);
  4012ba:	480d      	ldr	r0, [pc, #52]	; (4012f0 <USART0_Handler+0x3c>)
  4012bc:	4b0d      	ldr	r3, [pc, #52]	; (4012f4 <USART0_Handler+0x40>)
  4012be:	4798      	blx	r3
  4012c0:	6078      	str	r0, [r7, #4]

	/* Receive buffer is full. */
	if (ul_status & US_CSR_RXBUFF) {
  4012c2:	687b      	ldr	r3, [r7, #4]
  4012c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  4012c8:	2b00      	cmp	r3, #0
  4012ca:	d00c      	beq.n	4012e6 <USART0_Handler+0x32>
		usart_read(WIFI_USART, &received_byte_wifi);
  4012cc:	490a      	ldr	r1, [pc, #40]	; (4012f8 <USART0_Handler+0x44>)
  4012ce:	4808      	ldr	r0, [pc, #32]	; (4012f0 <USART0_Handler+0x3c>)
  4012d0:	4b0a      	ldr	r3, [pc, #40]	; (4012fc <USART0_Handler+0x48>)
  4012d2:	4798      	blx	r3
		new_rx_wifi = true;
  4012d4:	4b0a      	ldr	r3, [pc, #40]	; (401300 <USART0_Handler+0x4c>)
  4012d6:	2201      	movs	r2, #1
  4012d8:	701a      	strb	r2, [r3, #0]
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  4012da:	4b07      	ldr	r3, [pc, #28]	; (4012f8 <USART0_Handler+0x44>)
  4012dc:	681b      	ldr	r3, [r3, #0]
  4012de:	b2db      	uxtb	r3, r3
  4012e0:	4618      	mov	r0, r3
  4012e2:	4b08      	ldr	r3, [pc, #32]	; (401304 <USART0_Handler+0x50>)
  4012e4:	4798      	blx	r3
	}
}
  4012e6:	bf00      	nop
  4012e8:	3708      	adds	r7, #8
  4012ea:	46bd      	mov	sp, r7
  4012ec:	bd80      	pop	{r7, pc}
  4012ee:	bf00      	nop
  4012f0:	40024000 	.word	0x40024000
  4012f4:	00400501 	.word	0x00400501
  4012f8:	200004d4 	.word	0x200004d4
  4012fc:	004005c5 	.word	0x004005c5
  401300:	200004d8 	.word	0x200004d8
  401304:	00401309 	.word	0x00401309

00401308 <process_incoming_byte_wifi>:

void process_incoming_byte_wifi(uint8_t in_byte)
{
  401308:	b480      	push	{r7}
  40130a:	b083      	sub	sp, #12
  40130c:	af00      	add	r7, sp, #0
  40130e:	4603      	mov	r3, r0
  401310:	71fb      	strb	r3, [r7, #7]
	// put the byte in the next spot of the buffer
	input_line_wifi[input_pos_wifi++] = in_byte;
  401312:	4b06      	ldr	r3, [pc, #24]	; (40132c <process_incoming_byte_wifi+0x24>)
  401314:	681b      	ldr	r3, [r3, #0]
  401316:	1c5a      	adds	r2, r3, #1
  401318:	4904      	ldr	r1, [pc, #16]	; (40132c <process_incoming_byte_wifi+0x24>)
  40131a:	600a      	str	r2, [r1, #0]
  40131c:	4904      	ldr	r1, [pc, #16]	; (401330 <process_incoming_byte_wifi+0x28>)
  40131e:	79fa      	ldrb	r2, [r7, #7]
  401320:	54ca      	strb	r2, [r1, r3]
}
  401322:	bf00      	nop
  401324:	370c      	adds	r7, #12
  401326:	46bd      	mov	sp, r7
  401328:	bc80      	pop	{r7}
  40132a:	4770      	bx	lr
  40132c:	200004dc 	.word	0x200004dc
  401330:	200004ec 	.word	0x200004ec

00401334 <wifi_command_response_handler>:

void wifi_command_response_handler(uint32_t ul_id, uint32_t ul_mask)
{
  401334:	b580      	push	{r7, lr}
  401336:	b084      	sub	sp, #16
  401338:	af00      	add	r7, sp, #0
  40133a:	6078      	str	r0, [r7, #4]
  40133c:	6039      	str	r1, [r7, #0]
	unused(ul_id);
	unused(ul_mask);
	
	wifi_comm_success = true;
  40133e:	4b0d      	ldr	r3, [pc, #52]	; (401374 <wifi_command_response_handler+0x40>)
  401340:	2201      	movs	r2, #1
  401342:	701a      	strb	r2, [r3, #0]
	process_data_wifi();
  401344:	4b0c      	ldr	r3, [pc, #48]	; (401378 <wifi_command_response_handler+0x44>)
  401346:	4798      	blx	r3
	for (int jj=0;jj<MAX_INPUT_WIFI;jj++) input_line_wifi[jj] = 0;
  401348:	2300      	movs	r3, #0
  40134a:	60fb      	str	r3, [r7, #12]
  40134c:	e007      	b.n	40135e <wifi_command_response_handler+0x2a>
  40134e:	4a0b      	ldr	r2, [pc, #44]	; (40137c <wifi_command_response_handler+0x48>)
  401350:	68fb      	ldr	r3, [r7, #12]
  401352:	4413      	add	r3, r2
  401354:	2200      	movs	r2, #0
  401356:	701a      	strb	r2, [r3, #0]
  401358:	68fb      	ldr	r3, [r7, #12]
  40135a:	3301      	adds	r3, #1
  40135c:	60fb      	str	r3, [r7, #12]
  40135e:	68fb      	ldr	r3, [r7, #12]
  401360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  401364:	dbf3      	blt.n	40134e <wifi_command_response_handler+0x1a>
	input_pos_wifi = 0;
  401366:	4b06      	ldr	r3, [pc, #24]	; (401380 <wifi_command_response_handler+0x4c>)
  401368:	2200      	movs	r2, #0
  40136a:	601a      	str	r2, [r3, #0]
}
  40136c:	bf00      	nop
  40136e:	3710      	adds	r7, #16
  401370:	46bd      	mov	sp, r7
  401372:	bd80      	pop	{r7, pc}
  401374:	200004e0 	.word	0x200004e0
  401378:	00401385 	.word	0x00401385
  40137c:	200004ec 	.word	0x200004ec
  401380:	200004dc 	.word	0x200004dc

00401384 <process_data_wifi>:

void process_data_wifi(void)
{
  401384:	b580      	push	{r7, lr}
  401386:	af00      	add	r7, sp, #0
	if (strstr(input_line_wifi, "SUCCESS")) {
  401388:	4905      	ldr	r1, [pc, #20]	; (4013a0 <process_data_wifi+0x1c>)
  40138a:	4806      	ldr	r0, [pc, #24]	; (4013a4 <process_data_wifi+0x20>)
  40138c:	4b06      	ldr	r3, [pc, #24]	; (4013a8 <process_data_wifi+0x24>)
  40138e:	4798      	blx	r3
  401390:	4603      	mov	r3, r0
  401392:	2b00      	cmp	r3, #0
  401394:	d002      	beq.n	40139c <process_data_wifi+0x18>
		ioport_toggle_pin_level(LED_PIN);
  401396:	2017      	movs	r0, #23
  401398:	4b04      	ldr	r3, [pc, #16]	; (4013ac <process_data_wifi+0x28>)
  40139a:	4798      	blx	r3
	}
}
  40139c:	bf00      	nop
  40139e:	bd80      	pop	{r7, pc}
  4013a0:	0040261c 	.word	0x0040261c
  4013a4:	200004ec 	.word	0x200004ec
  4013a8:	004020f1 	.word	0x004020f1
  4013ac:	00401249 	.word	0x00401249

004013b0 <configure_usart_wifi>:
{
	
}

void configure_usart_wifi(void)
{
  4013b0:	b5b0      	push	{r4, r5, r7, lr}
  4013b2:	b086      	sub	sp, #24
  4013b4:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  4013b6:	4919      	ldr	r1, [pc, #100]	; (40141c <configure_usart_wifi+0x6c>)
  4013b8:	2005      	movs	r0, #5
  4013ba:	4b19      	ldr	r3, [pc, #100]	; (401420 <configure_usart_wifi+0x70>)
  4013bc:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  4013be:	4917      	ldr	r1, [pc, #92]	; (40141c <configure_usart_wifi+0x6c>)
  4013c0:	2005      	movs	r0, #5
  4013c2:	4b17      	ldr	r3, [pc, #92]	; (401420 <configure_usart_wifi+0x70>)
  4013c4:	4798      	blx	r3
	
	const sam_usart_opt_t usart_console_settings = {
  4013c6:	4b17      	ldr	r3, [pc, #92]	; (401424 <configure_usart_wifi+0x74>)
  4013c8:	463c      	mov	r4, r7
  4013ca:	461d      	mov	r5, r3
  4013cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4013ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4013d0:	e895 0003 	ldmia.w	r5, {r0, r1}
  4013d4:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(WIFI_ID_USART);
  4013d8:	200e      	movs	r0, #14
  4013da:	4b13      	ldr	r3, [pc, #76]	; (401428 <configure_usart_wifi+0x78>)
  4013dc:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(WIFI_USART, &usart_console_settings, sysclk_get_peripheral_hz());
  4013de:	4b13      	ldr	r3, [pc, #76]	; (40142c <configure_usart_wifi+0x7c>)
  4013e0:	4798      	blx	r3
  4013e2:	4602      	mov	r2, r0
  4013e4:	463b      	mov	r3, r7
  4013e6:	4619      	mov	r1, r3
  4013e8:	4811      	ldr	r0, [pc, #68]	; (401430 <configure_usart_wifi+0x80>)
  4013ea:	4b12      	ldr	r3, [pc, #72]	; (401434 <configure_usart_wifi+0x84>)
  4013ec:	4798      	blx	r3

	/* Disable all the interrupts. */
	usart_disable_interrupt(WIFI_USART, ALL_INTERRUPT_MASK);
  4013ee:	f04f 31ff 	mov.w	r1, #4294967295
  4013f2:	480f      	ldr	r0, [pc, #60]	; (401430 <configure_usart_wifi+0x80>)
  4013f4:	4b10      	ldr	r3, [pc, #64]	; (401438 <configure_usart_wifi+0x88>)
  4013f6:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(WIFI_USART);
  4013f8:	480d      	ldr	r0, [pc, #52]	; (401430 <configure_usart_wifi+0x80>)
  4013fa:	4b10      	ldr	r3, [pc, #64]	; (40143c <configure_usart_wifi+0x8c>)
  4013fc:	4798      	blx	r3
	usart_enable_rx(WIFI_USART);
  4013fe:	480c      	ldr	r0, [pc, #48]	; (401430 <configure_usart_wifi+0x80>)
  401400:	4b0f      	ldr	r3, [pc, #60]	; (401440 <configure_usart_wifi+0x90>)
  401402:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(WIFI_USART_IRQn);
  401404:	200e      	movs	r0, #14
  401406:	4b0f      	ldr	r3, [pc, #60]	; (401444 <configure_usart_wifi+0x94>)
  401408:	4798      	blx	r3
	
	usart_enable_interrupt(WIFI_USART, US_IER_RXRDY);
  40140a:	2101      	movs	r1, #1
  40140c:	4808      	ldr	r0, [pc, #32]	; (401430 <configure_usart_wifi+0x80>)
  40140e:	4b0e      	ldr	r3, [pc, #56]	; (401448 <configure_usart_wifi+0x98>)
  401410:	4798      	blx	r3
}
  401412:	bf00      	nop
  401414:	3718      	adds	r7, #24
  401416:	46bd      	mov	sp, r7
  401418:	bdb0      	pop	{r4, r5, r7, pc}
  40141a:	bf00      	nop
  40141c:	08000001 	.word	0x08000001
  401420:	00400c59 	.word	0x00400c59
  401424:	00402624 	.word	0x00402624
  401428:	0040122d 	.word	0x0040122d
  40142c:	00401219 	.word	0x00401219
  401430:	40024000 	.word	0x40024000
  401434:	004003e9 	.word	0x004003e9
  401438:	004004e7 	.word	0x004004e7
  40143c:	0040046d 	.word	0x0040046d
  401440:	0040049d 	.word	0x0040049d
  401444:	00401151 	.word	0x00401151
  401448:	004004cd 	.word	0x004004cd

0040144c <configure_wifi_comm_pin>:

void configure_wifi_comm_pin(void)
{
  40144c:	b590      	push	{r4, r7, lr}
  40144e:	b083      	sub	sp, #12
  401450:	af02      	add	r7, sp, #8
	/* Configure PIO clock. */
	pmc_enable_periph_clk(WIFI_COMM_ID);
  401452:	200b      	movs	r0, #11
  401454:	4b0b      	ldr	r3, [pc, #44]	; (401484 <configure_wifi_comm_pin+0x38>)
  401456:	4798      	blx	r3

	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_NUM, WIFI_COMM_ATTR, wifi_command_response_handler);
  401458:	4b0b      	ldr	r3, [pc, #44]	; (401488 <configure_wifi_comm_pin+0x3c>)
  40145a:	9300      	str	r3, [sp, #0]
  40145c:	2370      	movs	r3, #112	; 0x70
  40145e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401462:	210b      	movs	r1, #11
  401464:	4809      	ldr	r0, [pc, #36]	; (40148c <configure_wifi_comm_pin+0x40>)
  401466:	4c0a      	ldr	r4, [pc, #40]	; (401490 <configure_wifi_comm_pin+0x44>)
  401468:	47a0      	blx	r4

	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);
  40146a:	200b      	movs	r0, #11
  40146c:	4b09      	ldr	r3, [pc, #36]	; (401494 <configure_wifi_comm_pin+0x48>)
  40146e:	4798      	blx	r3

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_NUM);
  401470:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  401474:	4805      	ldr	r0, [pc, #20]	; (40148c <configure_wifi_comm_pin+0x40>)
  401476:	4b08      	ldr	r3, [pc, #32]	; (401498 <configure_wifi_comm_pin+0x4c>)
  401478:	4798      	blx	r3
}
  40147a:	bf00      	nop
  40147c:	3704      	adds	r7, #4
  40147e:	46bd      	mov	sp, r7
  401480:	bd90      	pop	{r4, r7, pc}
  401482:	bf00      	nop
  401484:	00401079 	.word	0x00401079
  401488:	00401335 	.word	0x00401335
  40148c:	400e0e00 	.word	0x400e0e00
  401490:	0040020d 	.word	0x0040020d
  401494:	00401151 	.word	0x00401151
  401498:	00400bf7 	.word	0x00400bf7

0040149c <ioport_set_pin_dir>:
{
  40149c:	b480      	push	{r7}
  40149e:	b08d      	sub	sp, #52	; 0x34
  4014a0:	af00      	add	r7, sp, #0
  4014a2:	6078      	str	r0, [r7, #4]
  4014a4:	460b      	mov	r3, r1
  4014a6:	70fb      	strb	r3, [r7, #3]
  4014a8:	687b      	ldr	r3, [r7, #4]
  4014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  4014ac:	78fb      	ldrb	r3, [r7, #3]
  4014ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4014b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4014b4:	627b      	str	r3, [r7, #36]	; 0x24
  4014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4014b8:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4014ba:	6a3b      	ldr	r3, [r7, #32]
  4014bc:	095b      	lsrs	r3, r3, #5
  4014be:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4014c0:	69fb      	ldr	r3, [r7, #28]
  4014c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4014c6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4014ca:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4014cc:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  4014ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4014d2:	2b01      	cmp	r3, #1
  4014d4:	d109      	bne.n	4014ea <ioport_set_pin_dir+0x4e>
  4014d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4014d8:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4014da:	697b      	ldr	r3, [r7, #20]
  4014dc:	f003 031f 	and.w	r3, r3, #31
  4014e0:	2201      	movs	r2, #1
  4014e2:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4014e4:	69bb      	ldr	r3, [r7, #24]
  4014e6:	611a      	str	r2, [r3, #16]
  4014e8:	e00c      	b.n	401504 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4014ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4014ee:	2b00      	cmp	r3, #0
  4014f0:	d108      	bne.n	401504 <ioport_set_pin_dir+0x68>
  4014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4014f4:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4014f6:	693b      	ldr	r3, [r7, #16]
  4014f8:	f003 031f 	and.w	r3, r3, #31
  4014fc:	2201      	movs	r2, #1
  4014fe:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401500:	69bb      	ldr	r3, [r7, #24]
  401502:	615a      	str	r2, [r3, #20]
  401504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401506:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401508:	68fb      	ldr	r3, [r7, #12]
  40150a:	f003 031f 	and.w	r3, r3, #31
  40150e:	2201      	movs	r2, #1
  401510:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401512:	69bb      	ldr	r3, [r7, #24]
  401514:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401518:	bf00      	nop
  40151a:	3734      	adds	r7, #52	; 0x34
  40151c:	46bd      	mov	sp, r7
  40151e:	bc80      	pop	{r7}
  401520:	4770      	bx	lr

00401522 <ioport_set_pin_level>:
{
  401522:	b480      	push	{r7}
  401524:	b08b      	sub	sp, #44	; 0x2c
  401526:	af00      	add	r7, sp, #0
  401528:	6078      	str	r0, [r7, #4]
  40152a:	460b      	mov	r3, r1
  40152c:	70fb      	strb	r3, [r7, #3]
  40152e:	687b      	ldr	r3, [r7, #4]
  401530:	627b      	str	r3, [r7, #36]	; 0x24
  401532:	78fb      	ldrb	r3, [r7, #3]
  401534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40153a:	61fb      	str	r3, [r7, #28]
  40153c:	69fb      	ldr	r3, [r7, #28]
  40153e:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401540:	69bb      	ldr	r3, [r7, #24]
  401542:	095b      	lsrs	r3, r3, #5
  401544:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  401546:	697b      	ldr	r3, [r7, #20]
  401548:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40154c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401550:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401552:	613b      	str	r3, [r7, #16]
	if (level) {
  401554:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401558:	2b00      	cmp	r3, #0
  40155a:	d009      	beq.n	401570 <ioport_set_pin_level+0x4e>
  40155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40155e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401560:	68fb      	ldr	r3, [r7, #12]
  401562:	f003 031f 	and.w	r3, r3, #31
  401566:	2201      	movs	r2, #1
  401568:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40156a:	693b      	ldr	r3, [r7, #16]
  40156c:	631a      	str	r2, [r3, #48]	; 0x30
}
  40156e:	e008      	b.n	401582 <ioport_set_pin_level+0x60>
  401570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401572:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401574:	68bb      	ldr	r3, [r7, #8]
  401576:	f003 031f 	and.w	r3, r3, #31
  40157a:	2201      	movs	r2, #1
  40157c:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40157e:	693b      	ldr	r3, [r7, #16]
  401580:	635a      	str	r2, [r3, #52]	; 0x34
  401582:	bf00      	nop
  401584:	372c      	adds	r7, #44	; 0x2c
  401586:	46bd      	mov	sp, r7
  401588:	bc80      	pop	{r7}
  40158a:	4770      	bx	lr

0040158c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  40158c:	b580      	push	{r7, lr}
  40158e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	ioport_set_pin_dir(LED_PIN, IOPORT_DIR_OUTPUT);
  401590:	2101      	movs	r1, #1
  401592:	2017      	movs	r0, #23
  401594:	4b03      	ldr	r3, [pc, #12]	; (4015a4 <board_init+0x18>)
  401596:	4798      	blx	r3
	ioport_set_pin_level(LED_PIN, false);
  401598:	2100      	movs	r1, #0
  40159a:	2017      	movs	r0, #23
  40159c:	4b02      	ldr	r3, [pc, #8]	; (4015a8 <board_init+0x1c>)
  40159e:	4798      	blx	r3
}
  4015a0:	bf00      	nop
  4015a2:	bd80      	pop	{r7, pc}
  4015a4:	0040149d 	.word	0x0040149d
  4015a8:	00401523 	.word	0x00401523

004015ac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4015ac:	b580      	push	{r7, lr}
  4015ae:	b084      	sub	sp, #16
  4015b0:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4015b2:	4b27      	ldr	r3, [pc, #156]	; (401650 <Reset_Handler+0xa4>)
  4015b4:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  4015b6:	4b27      	ldr	r3, [pc, #156]	; (401654 <Reset_Handler+0xa8>)
  4015b8:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  4015ba:	68fa      	ldr	r2, [r7, #12]
  4015bc:	68bb      	ldr	r3, [r7, #8]
  4015be:	429a      	cmp	r2, r3
  4015c0:	d90d      	bls.n	4015de <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  4015c2:	e007      	b.n	4015d4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4015c4:	68bb      	ldr	r3, [r7, #8]
  4015c6:	1d1a      	adds	r2, r3, #4
  4015c8:	60ba      	str	r2, [r7, #8]
  4015ca:	68fa      	ldr	r2, [r7, #12]
  4015cc:	1d11      	adds	r1, r2, #4
  4015ce:	60f9      	str	r1, [r7, #12]
  4015d0:	6812      	ldr	r2, [r2, #0]
  4015d2:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  4015d4:	68bb      	ldr	r3, [r7, #8]
  4015d6:	4a20      	ldr	r2, [pc, #128]	; (401658 <Reset_Handler+0xac>)
  4015d8:	4293      	cmp	r3, r2
  4015da:	d3f3      	bcc.n	4015c4 <Reset_Handler+0x18>
  4015dc:	e020      	b.n	401620 <Reset_Handler+0x74>
		}
	} else if (pSrc < pDest) {
  4015de:	68fa      	ldr	r2, [r7, #12]
  4015e0:	68bb      	ldr	r3, [r7, #8]
  4015e2:	429a      	cmp	r2, r3
  4015e4:	d21c      	bcs.n	401620 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4015e6:	4a1c      	ldr	r2, [pc, #112]	; (401658 <Reset_Handler+0xac>)
  4015e8:	4b1a      	ldr	r3, [pc, #104]	; (401654 <Reset_Handler+0xa8>)
  4015ea:	1ad3      	subs	r3, r2, r3
  4015ec:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4015ee:	68fa      	ldr	r2, [r7, #12]
  4015f0:	687b      	ldr	r3, [r7, #4]
  4015f2:	4413      	add	r3, r2
  4015f4:	3b04      	subs	r3, #4
  4015f6:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  4015f8:	68ba      	ldr	r2, [r7, #8]
  4015fa:	687b      	ldr	r3, [r7, #4]
  4015fc:	4413      	add	r3, r2
  4015fe:	3b04      	subs	r3, #4
  401600:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  401602:	e00a      	b.n	40161a <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401604:	68bb      	ldr	r3, [r7, #8]
  401606:	1f1a      	subs	r2, r3, #4
  401608:	60ba      	str	r2, [r7, #8]
  40160a:	68fa      	ldr	r2, [r7, #12]
  40160c:	1f11      	subs	r1, r2, #4
  40160e:	60f9      	str	r1, [r7, #12]
  401610:	6812      	ldr	r2, [r2, #0]
  401612:	601a      	str	r2, [r3, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  401614:	687b      	ldr	r3, [r7, #4]
  401616:	3b04      	subs	r3, #4
  401618:	607b      	str	r3, [r7, #4]
  40161a:	687b      	ldr	r3, [r7, #4]
  40161c:	2b00      	cmp	r3, #0
  40161e:	d1f1      	bne.n	401604 <Reset_Handler+0x58>
		}
	}
	__NOP();
  401620:	bf00      	nop

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401622:	4b0e      	ldr	r3, [pc, #56]	; (40165c <Reset_Handler+0xb0>)
  401624:	60bb      	str	r3, [r7, #8]
  401626:	e004      	b.n	401632 <Reset_Handler+0x86>
		*pDest++ = 0;
  401628:	68bb      	ldr	r3, [r7, #8]
  40162a:	1d1a      	adds	r2, r3, #4
  40162c:	60ba      	str	r2, [r7, #8]
  40162e:	2200      	movs	r2, #0
  401630:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  401632:	68bb      	ldr	r3, [r7, #8]
  401634:	4a0a      	ldr	r2, [pc, #40]	; (401660 <Reset_Handler+0xb4>)
  401636:	4293      	cmp	r3, r2
  401638:	d3f6      	bcc.n	401628 <Reset_Handler+0x7c>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40163a:	4b0a      	ldr	r3, [pc, #40]	; (401664 <Reset_Handler+0xb8>)
  40163c:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40163e:	4a0a      	ldr	r2, [pc, #40]	; (401668 <Reset_Handler+0xbc>)
  401640:	68fb      	ldr	r3, [r7, #12]
  401642:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401644:	4b09      	ldr	r3, [pc, #36]	; (40166c <Reset_Handler+0xc0>)
  401646:	4798      	blx	r3

	/* Branch to main function */
	main();
  401648:	4b09      	ldr	r3, [pc, #36]	; (401670 <Reset_Handler+0xc4>)
  40164a:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40164c:	e7fe      	b.n	40164c <Reset_Handler+0xa0>
  40164e:	bf00      	nop
  401650:	00402688 	.word	0x00402688
  401654:	20000000 	.word	0x20000000
  401658:	2000043c 	.word	0x2000043c
  40165c:	2000043c 	.word	0x2000043c
  401660:	200008f8 	.word	0x200008f8
  401664:	00400000 	.word	0x00400000
  401668:	e000ed00 	.word	0xe000ed00
  40166c:	00401df1 	.word	0x00401df1
  401670:	004019ed 	.word	0x004019ed

00401674 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401674:	b480      	push	{r7}
  401676:	af00      	add	r7, sp, #0
	while (1) {
  401678:	e7fe      	b.n	401678 <Dummy_Handler+0x4>
	...

0040167c <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  40167c:	b480      	push	{r7}
  40167e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401680:	4b5d      	ldr	r3, [pc, #372]	; (4017f8 <SystemCoreClockUpdate+0x17c>)
  401682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401684:	f003 0303 	and.w	r3, r3, #3
  401688:	2b03      	cmp	r3, #3
  40168a:	f200 8096 	bhi.w	4017ba <SystemCoreClockUpdate+0x13e>
  40168e:	a201      	add	r2, pc, #4	; (adr r2, 401694 <SystemCoreClockUpdate+0x18>)
  401690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401694:	004016a5 	.word	0x004016a5
  401698:	004016c5 	.word	0x004016c5
  40169c:	0040170f 	.word	0x0040170f
  4016a0:	0040170f 	.word	0x0040170f
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4016a4:	4b55      	ldr	r3, [pc, #340]	; (4017fc <SystemCoreClockUpdate+0x180>)
  4016a6:	695b      	ldr	r3, [r3, #20]
  4016a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4016ac:	2b00      	cmp	r3, #0
  4016ae:	d004      	beq.n	4016ba <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4016b0:	4b53      	ldr	r3, [pc, #332]	; (401800 <SystemCoreClockUpdate+0x184>)
  4016b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4016b6:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  4016b8:	e080      	b.n	4017bc <SystemCoreClockUpdate+0x140>
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4016ba:	4b51      	ldr	r3, [pc, #324]	; (401800 <SystemCoreClockUpdate+0x184>)
  4016bc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4016c0:	601a      	str	r2, [r3, #0]
		break;
  4016c2:	e07b      	b.n	4017bc <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4016c4:	4b4c      	ldr	r3, [pc, #304]	; (4017f8 <SystemCoreClockUpdate+0x17c>)
  4016c6:	6a1b      	ldr	r3, [r3, #32]
  4016c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4016cc:	2b00      	cmp	r3, #0
  4016ce:	d003      	beq.n	4016d8 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4016d0:	4b4b      	ldr	r3, [pc, #300]	; (401800 <SystemCoreClockUpdate+0x184>)
  4016d2:	4a4c      	ldr	r2, [pc, #304]	; (401804 <SystemCoreClockUpdate+0x188>)
  4016d4:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4016d6:	e071      	b.n	4017bc <SystemCoreClockUpdate+0x140>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016d8:	4b49      	ldr	r3, [pc, #292]	; (401800 <SystemCoreClockUpdate+0x184>)
  4016da:	4a4b      	ldr	r2, [pc, #300]	; (401808 <SystemCoreClockUpdate+0x18c>)
  4016dc:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4016de:	4b46      	ldr	r3, [pc, #280]	; (4017f8 <SystemCoreClockUpdate+0x17c>)
  4016e0:	6a1b      	ldr	r3, [r3, #32]
  4016e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016e6:	2b10      	cmp	r3, #16
  4016e8:	d008      	beq.n	4016fc <SystemCoreClockUpdate+0x80>
  4016ea:	2b20      	cmp	r3, #32
  4016ec:	d00a      	beq.n	401704 <SystemCoreClockUpdate+0x88>
  4016ee:	2b00      	cmp	r3, #0
  4016f0:	d000      	beq.n	4016f4 <SystemCoreClockUpdate+0x78>
			break;
  4016f2:	e00b      	b.n	40170c <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016f4:	4b42      	ldr	r3, [pc, #264]	; (401800 <SystemCoreClockUpdate+0x184>)
  4016f6:	4a44      	ldr	r2, [pc, #272]	; (401808 <SystemCoreClockUpdate+0x18c>)
  4016f8:	601a      	str	r2, [r3, #0]
			break;
  4016fa:	e007      	b.n	40170c <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4016fc:	4b40      	ldr	r3, [pc, #256]	; (401800 <SystemCoreClockUpdate+0x184>)
  4016fe:	4a43      	ldr	r2, [pc, #268]	; (40180c <SystemCoreClockUpdate+0x190>)
  401700:	601a      	str	r2, [r3, #0]
			break;
  401702:	e003      	b.n	40170c <SystemCoreClockUpdate+0x90>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401704:	4b3e      	ldr	r3, [pc, #248]	; (401800 <SystemCoreClockUpdate+0x184>)
  401706:	4a3f      	ldr	r2, [pc, #252]	; (401804 <SystemCoreClockUpdate+0x188>)
  401708:	601a      	str	r2, [r3, #0]
			break;
  40170a:	bf00      	nop
		break;
  40170c:	e056      	b.n	4017bc <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40170e:	4b3a      	ldr	r3, [pc, #232]	; (4017f8 <SystemCoreClockUpdate+0x17c>)
  401710:	6a1b      	ldr	r3, [r3, #32]
  401712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401716:	2b00      	cmp	r3, #0
  401718:	d003      	beq.n	401722 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40171a:	4b39      	ldr	r3, [pc, #228]	; (401800 <SystemCoreClockUpdate+0x184>)
  40171c:	4a39      	ldr	r2, [pc, #228]	; (401804 <SystemCoreClockUpdate+0x188>)
  40171e:	601a      	str	r2, [r3, #0]
  401720:	e019      	b.n	401756 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401722:	4b37      	ldr	r3, [pc, #220]	; (401800 <SystemCoreClockUpdate+0x184>)
  401724:	4a38      	ldr	r2, [pc, #224]	; (401808 <SystemCoreClockUpdate+0x18c>)
  401726:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401728:	4b33      	ldr	r3, [pc, #204]	; (4017f8 <SystemCoreClockUpdate+0x17c>)
  40172a:	6a1b      	ldr	r3, [r3, #32]
  40172c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401730:	2b10      	cmp	r3, #16
  401732:	d008      	beq.n	401746 <SystemCoreClockUpdate+0xca>
  401734:	2b20      	cmp	r3, #32
  401736:	d00a      	beq.n	40174e <SystemCoreClockUpdate+0xd2>
  401738:	2b00      	cmp	r3, #0
  40173a:	d000      	beq.n	40173e <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  40173c:	e00b      	b.n	401756 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40173e:	4b30      	ldr	r3, [pc, #192]	; (401800 <SystemCoreClockUpdate+0x184>)
  401740:	4a31      	ldr	r2, [pc, #196]	; (401808 <SystemCoreClockUpdate+0x18c>)
  401742:	601a      	str	r2, [r3, #0]
					break;
  401744:	e007      	b.n	401756 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401746:	4b2e      	ldr	r3, [pc, #184]	; (401800 <SystemCoreClockUpdate+0x184>)
  401748:	4a30      	ldr	r2, [pc, #192]	; (40180c <SystemCoreClockUpdate+0x190>)
  40174a:	601a      	str	r2, [r3, #0]
					break;
  40174c:	e003      	b.n	401756 <SystemCoreClockUpdate+0xda>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40174e:	4b2c      	ldr	r3, [pc, #176]	; (401800 <SystemCoreClockUpdate+0x184>)
  401750:	4a2c      	ldr	r2, [pc, #176]	; (401804 <SystemCoreClockUpdate+0x188>)
  401752:	601a      	str	r2, [r3, #0]
					break;
  401754:	bf00      	nop
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401756:	4b28      	ldr	r3, [pc, #160]	; (4017f8 <SystemCoreClockUpdate+0x17c>)
  401758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40175a:	f003 0303 	and.w	r3, r3, #3
  40175e:	2b02      	cmp	r3, #2
  401760:	d115      	bne.n	40178e <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401762:	4b25      	ldr	r3, [pc, #148]	; (4017f8 <SystemCoreClockUpdate+0x17c>)
  401764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  401766:	0c1b      	lsrs	r3, r3, #16
  401768:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40176c:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40176e:	4a24      	ldr	r2, [pc, #144]	; (401800 <SystemCoreClockUpdate+0x184>)
  401770:	6812      	ldr	r2, [r2, #0]
  401772:	fb02 f303 	mul.w	r3, r2, r3
  401776:	4a22      	ldr	r2, [pc, #136]	; (401800 <SystemCoreClockUpdate+0x184>)
  401778:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40177a:	4b1f      	ldr	r3, [pc, #124]	; (4017f8 <SystemCoreClockUpdate+0x17c>)
  40177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40177e:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401780:	4a1f      	ldr	r2, [pc, #124]	; (401800 <SystemCoreClockUpdate+0x184>)
  401782:	6812      	ldr	r2, [r2, #0]
  401784:	fbb2 f3f3 	udiv	r3, r2, r3
  401788:	4a1d      	ldr	r2, [pc, #116]	; (401800 <SystemCoreClockUpdate+0x184>)
  40178a:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40178c:	e016      	b.n	4017bc <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40178e:	4b1a      	ldr	r3, [pc, #104]	; (4017f8 <SystemCoreClockUpdate+0x17c>)
  401790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401792:	0c1b      	lsrs	r3, r3, #16
  401794:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401798:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40179a:	4a19      	ldr	r2, [pc, #100]	; (401800 <SystemCoreClockUpdate+0x184>)
  40179c:	6812      	ldr	r2, [r2, #0]
  40179e:	fb02 f303 	mul.w	r3, r2, r3
  4017a2:	4a17      	ldr	r2, [pc, #92]	; (401800 <SystemCoreClockUpdate+0x184>)
  4017a4:	6013      	str	r3, [r2, #0]
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4017a6:	4b14      	ldr	r3, [pc, #80]	; (4017f8 <SystemCoreClockUpdate+0x17c>)
  4017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  4017aa:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4017ac:	4a14      	ldr	r2, [pc, #80]	; (401800 <SystemCoreClockUpdate+0x184>)
  4017ae:	6812      	ldr	r2, [r2, #0]
  4017b0:	fbb2 f3f3 	udiv	r3, r2, r3
  4017b4:	4a12      	ldr	r2, [pc, #72]	; (401800 <SystemCoreClockUpdate+0x184>)
  4017b6:	6013      	str	r3, [r2, #0]
		break;
  4017b8:	e000      	b.n	4017bc <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  4017ba:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4017bc:	4b0e      	ldr	r3, [pc, #56]	; (4017f8 <SystemCoreClockUpdate+0x17c>)
  4017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017c4:	2b70      	cmp	r3, #112	; 0x70
  4017c6:	d108      	bne.n	4017da <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4017c8:	4b0d      	ldr	r3, [pc, #52]	; (401800 <SystemCoreClockUpdate+0x184>)
  4017ca:	681b      	ldr	r3, [r3, #0]
  4017cc:	4a10      	ldr	r2, [pc, #64]	; (401810 <SystemCoreClockUpdate+0x194>)
  4017ce:	fba2 2303 	umull	r2, r3, r2, r3
  4017d2:	085b      	lsrs	r3, r3, #1
  4017d4:	4a0a      	ldr	r2, [pc, #40]	; (401800 <SystemCoreClockUpdate+0x184>)
  4017d6:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4017d8:	e00a      	b.n	4017f0 <SystemCoreClockUpdate+0x174>
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4017da:	4b07      	ldr	r3, [pc, #28]	; (4017f8 <SystemCoreClockUpdate+0x17c>)
  4017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017de:	091b      	lsrs	r3, r3, #4
  4017e0:	f003 0307 	and.w	r3, r3, #7
		SystemCoreClock >>=
  4017e4:	4a06      	ldr	r2, [pc, #24]	; (401800 <SystemCoreClockUpdate+0x184>)
  4017e6:	6812      	ldr	r2, [r2, #0]
  4017e8:	fa22 f303 	lsr.w	r3, r2, r3
  4017ec:	4a04      	ldr	r2, [pc, #16]	; (401800 <SystemCoreClockUpdate+0x184>)
  4017ee:	6013      	str	r3, [r2, #0]
}
  4017f0:	bf00      	nop
  4017f2:	46bd      	mov	sp, r7
  4017f4:	bc80      	pop	{r7}
  4017f6:	4770      	bx	lr
  4017f8:	400e0400 	.word	0x400e0400
  4017fc:	400e1410 	.word	0x400e1410
  401800:	2000000c 	.word	0x2000000c
  401804:	00b71b00 	.word	0x00b71b00
  401808:	003d0900 	.word	0x003d0900
  40180c:	007a1200 	.word	0x007a1200
  401810:	aaaaaaab 	.word	0xaaaaaaab

00401814 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  401814:	b480      	push	{r7}
  401816:	b083      	sub	sp, #12
  401818:	af00      	add	r7, sp, #0
  40181a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40181c:	687b      	ldr	r3, [r7, #4]
  40181e:	4a18      	ldr	r2, [pc, #96]	; (401880 <system_init_flash+0x6c>)
  401820:	4293      	cmp	r3, r2
  401822:	d804      	bhi.n	40182e <system_init_flash+0x1a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401824:	4b17      	ldr	r3, [pc, #92]	; (401884 <system_init_flash+0x70>)
  401826:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40182a:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40182c:	e023      	b.n	401876 <system_init_flash+0x62>
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40182e:	687b      	ldr	r3, [r7, #4]
  401830:	4a15      	ldr	r2, [pc, #84]	; (401888 <system_init_flash+0x74>)
  401832:	4293      	cmp	r3, r2
  401834:	d803      	bhi.n	40183e <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401836:	4b13      	ldr	r3, [pc, #76]	; (401884 <system_init_flash+0x70>)
  401838:	4a14      	ldr	r2, [pc, #80]	; (40188c <system_init_flash+0x78>)
  40183a:	601a      	str	r2, [r3, #0]
}
  40183c:	e01b      	b.n	401876 <system_init_flash+0x62>
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40183e:	687b      	ldr	r3, [r7, #4]
  401840:	4a13      	ldr	r2, [pc, #76]	; (401890 <system_init_flash+0x7c>)
  401842:	4293      	cmp	r3, r2
  401844:	d803      	bhi.n	40184e <system_init_flash+0x3a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401846:	4b0f      	ldr	r3, [pc, #60]	; (401884 <system_init_flash+0x70>)
  401848:	4a12      	ldr	r2, [pc, #72]	; (401894 <system_init_flash+0x80>)
  40184a:	601a      	str	r2, [r3, #0]
}
  40184c:	e013      	b.n	401876 <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40184e:	687b      	ldr	r3, [r7, #4]
  401850:	4a11      	ldr	r2, [pc, #68]	; (401898 <system_init_flash+0x84>)
  401852:	4293      	cmp	r3, r2
  401854:	d803      	bhi.n	40185e <system_init_flash+0x4a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401856:	4b0b      	ldr	r3, [pc, #44]	; (401884 <system_init_flash+0x70>)
  401858:	4a10      	ldr	r2, [pc, #64]	; (40189c <system_init_flash+0x88>)
  40185a:	601a      	str	r2, [r3, #0]
}
  40185c:	e00b      	b.n	401876 <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40185e:	687b      	ldr	r3, [r7, #4]
  401860:	4a0f      	ldr	r2, [pc, #60]	; (4018a0 <system_init_flash+0x8c>)
  401862:	4293      	cmp	r3, r2
  401864:	d804      	bhi.n	401870 <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401866:	4b07      	ldr	r3, [pc, #28]	; (401884 <system_init_flash+0x70>)
  401868:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40186c:	601a      	str	r2, [r3, #0]
}
  40186e:	e002      	b.n	401876 <system_init_flash+0x62>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401870:	4b04      	ldr	r3, [pc, #16]	; (401884 <system_init_flash+0x70>)
  401872:	4a0c      	ldr	r2, [pc, #48]	; (4018a4 <system_init_flash+0x90>)
  401874:	601a      	str	r2, [r3, #0]
}
  401876:	bf00      	nop
  401878:	370c      	adds	r7, #12
  40187a:	46bd      	mov	sp, r7
  40187c:	bc80      	pop	{r7}
  40187e:	4770      	bx	lr
  401880:	01312cff 	.word	0x01312cff
  401884:	400e0a00 	.word	0x400e0a00
  401888:	026259ff 	.word	0x026259ff
  40188c:	04000100 	.word	0x04000100
  401890:	039386ff 	.word	0x039386ff
  401894:	04000200 	.word	0x04000200
  401898:	04c4b3ff 	.word	0x04c4b3ff
  40189c:	04000300 	.word	0x04000300
  4018a0:	05f5e0ff 	.word	0x05f5e0ff
  4018a4:	04000500 	.word	0x04000500

004018a8 <osc_get_rate>:
{
  4018a8:	b480      	push	{r7}
  4018aa:	b083      	sub	sp, #12
  4018ac:	af00      	add	r7, sp, #0
  4018ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4018b0:	687b      	ldr	r3, [r7, #4]
  4018b2:	2b07      	cmp	r3, #7
  4018b4:	d825      	bhi.n	401902 <osc_get_rate+0x5a>
  4018b6:	a201      	add	r2, pc, #4	; (adr r2, 4018bc <osc_get_rate+0x14>)
  4018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4018bc:	004018dd 	.word	0x004018dd
  4018c0:	004018e3 	.word	0x004018e3
  4018c4:	004018e9 	.word	0x004018e9
  4018c8:	004018ef 	.word	0x004018ef
  4018cc:	004018f3 	.word	0x004018f3
  4018d0:	004018f7 	.word	0x004018f7
  4018d4:	004018fb 	.word	0x004018fb
  4018d8:	004018ff 	.word	0x004018ff
		return OSC_SLCK_32K_RC_HZ;
  4018dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4018e0:	e010      	b.n	401904 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4018e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4018e6:	e00d      	b.n	401904 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4018e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4018ec:	e00a      	b.n	401904 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4018ee:	4b08      	ldr	r3, [pc, #32]	; (401910 <osc_get_rate+0x68>)
  4018f0:	e008      	b.n	401904 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4018f2:	4b08      	ldr	r3, [pc, #32]	; (401914 <osc_get_rate+0x6c>)
  4018f4:	e006      	b.n	401904 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4018f6:	4b08      	ldr	r3, [pc, #32]	; (401918 <osc_get_rate+0x70>)
  4018f8:	e004      	b.n	401904 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4018fa:	4b07      	ldr	r3, [pc, #28]	; (401918 <osc_get_rate+0x70>)
  4018fc:	e002      	b.n	401904 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4018fe:	4b06      	ldr	r3, [pc, #24]	; (401918 <osc_get_rate+0x70>)
  401900:	e000      	b.n	401904 <osc_get_rate+0x5c>
	return 0;
  401902:	2300      	movs	r3, #0
}
  401904:	4618      	mov	r0, r3
  401906:	370c      	adds	r7, #12
  401908:	46bd      	mov	sp, r7
  40190a:	bc80      	pop	{r7}
  40190c:	4770      	bx	lr
  40190e:	bf00      	nop
  401910:	003d0900 	.word	0x003d0900
  401914:	007a1200 	.word	0x007a1200
  401918:	00b71b00 	.word	0x00b71b00

0040191c <sysclk_get_main_hz>:
{
  40191c:	b580      	push	{r7, lr}
  40191e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  401920:	2006      	movs	r0, #6
  401922:	4b04      	ldr	r3, [pc, #16]	; (401934 <sysclk_get_main_hz+0x18>)
  401924:	4798      	blx	r3
  401926:	4602      	mov	r2, r0
  401928:	4613      	mov	r3, r2
  40192a:	009b      	lsls	r3, r3, #2
  40192c:	4413      	add	r3, r2
  40192e:	009b      	lsls	r3, r3, #2
}
  401930:	4618      	mov	r0, r3
  401932:	bd80      	pop	{r7, pc}
  401934:	004018a9 	.word	0x004018a9

00401938 <sysclk_get_cpu_hz>:
{
  401938:	b580      	push	{r7, lr}
  40193a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40193c:	4b02      	ldr	r3, [pc, #8]	; (401948 <sysclk_get_cpu_hz+0x10>)
  40193e:	4798      	blx	r3
  401940:	4603      	mov	r3, r0
  401942:	085b      	lsrs	r3, r3, #1
}
  401944:	4618      	mov	r0, r3
  401946:	bd80      	pop	{r7, pc}
  401948:	0040191d 	.word	0x0040191d

0040194c <sysclk_enable_peripheral_clock>:
{
  40194c:	b580      	push	{r7, lr}
  40194e:	b082      	sub	sp, #8
  401950:	af00      	add	r7, sp, #0
  401952:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401954:	6878      	ldr	r0, [r7, #4]
  401956:	4b03      	ldr	r3, [pc, #12]	; (401964 <sysclk_enable_peripheral_clock+0x18>)
  401958:	4798      	blx	r3
}
  40195a:	bf00      	nop
  40195c:	3708      	adds	r7, #8
  40195e:	46bd      	mov	sp, r7
  401960:	bd80      	pop	{r7, pc}
  401962:	bf00      	nop
  401964:	00401079 	.word	0x00401079

00401968 <ioport_init>:
{
  401968:	b580      	push	{r7, lr}
  40196a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  40196c:	200b      	movs	r0, #11
  40196e:	4b03      	ldr	r3, [pc, #12]	; (40197c <ioport_init+0x14>)
  401970:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401972:	200c      	movs	r0, #12
  401974:	4b01      	ldr	r3, [pc, #4]	; (40197c <ioport_init+0x14>)
  401976:	4798      	blx	r3
}
  401978:	bf00      	nop
  40197a:	bd80      	pop	{r7, pc}
  40197c:	0040194d 	.word	0x0040194d

00401980 <ioport_set_pin_level>:
{
  401980:	b480      	push	{r7}
  401982:	b08b      	sub	sp, #44	; 0x2c
  401984:	af00      	add	r7, sp, #0
  401986:	6078      	str	r0, [r7, #4]
  401988:	460b      	mov	r3, r1
  40198a:	70fb      	strb	r3, [r7, #3]
  40198c:	687b      	ldr	r3, [r7, #4]
  40198e:	627b      	str	r3, [r7, #36]	; 0x24
  401990:	78fb      	ldrb	r3, [r7, #3]
  401992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  401996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401998:	61fb      	str	r3, [r7, #28]
  40199a:	69fb      	ldr	r3, [r7, #28]
  40199c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40199e:	69bb      	ldr	r3, [r7, #24]
  4019a0:	095b      	lsrs	r3, r3, #5
  4019a2:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4019a4:	697b      	ldr	r3, [r7, #20]
  4019a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4019aa:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4019ae:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4019b0:	613b      	str	r3, [r7, #16]
	if (level) {
  4019b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4019b6:	2b00      	cmp	r3, #0
  4019b8:	d009      	beq.n	4019ce <ioport_set_pin_level+0x4e>
  4019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4019bc:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4019be:	68fb      	ldr	r3, [r7, #12]
  4019c0:	f003 031f 	and.w	r3, r3, #31
  4019c4:	2201      	movs	r2, #1
  4019c6:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4019c8:	693b      	ldr	r3, [r7, #16]
  4019ca:	631a      	str	r2, [r3, #48]	; 0x30
}
  4019cc:	e008      	b.n	4019e0 <ioport_set_pin_level+0x60>
  4019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4019d0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4019d2:	68bb      	ldr	r3, [r7, #8]
  4019d4:	f003 031f 	and.w	r3, r3, #31
  4019d8:	2201      	movs	r2, #1
  4019da:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4019dc:	693b      	ldr	r3, [r7, #16]
  4019de:	635a      	str	r2, [r3, #52]	; 0x34
  4019e0:	bf00      	nop
  4019e2:	372c      	adds	r7, #44	; 0x2c
  4019e4:	46bd      	mov	sp, r7
  4019e6:	bc80      	pop	{r7}
  4019e8:	4770      	bx	lr
	...

004019ec <main>:
 */
#include <asf.h>
#include "wifi.h"

int main (void)
{
  4019ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4019f0:	b083      	sub	sp, #12
  4019f2:	af00      	add	r7, sp, #0
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  4019f4:	4b2b      	ldr	r3, [pc, #172]	; (401aa4 <main+0xb8>)
  4019f6:	4798      	blx	r3
	sysclk_init();
  4019f8:	4b2b      	ldr	r3, [pc, #172]	; (401aa8 <main+0xbc>)
  4019fa:	4798      	blx	r3
	ioport_init();
  4019fc:	4b2b      	ldr	r3, [pc, #172]	; (401aac <main+0xc0>)
  4019fe:	4798      	blx	r3
	wdt_disable(WDT);
  401a00:	482b      	ldr	r0, [pc, #172]	; (401ab0 <main+0xc4>)
  401a02:	4b2c      	ldr	r3, [pc, #176]	; (401ab4 <main+0xc8>)
  401a04:	4798      	blx	r3
	
	configure_usart_wifi();
  401a06:	4b2c      	ldr	r3, [pc, #176]	; (401ab8 <main+0xcc>)
  401a08:	4798      	blx	r3
	configure_wifi_comm_pin();
  401a0a:	4b2c      	ldr	r3, [pc, #176]	; (401abc <main+0xd0>)
  401a0c:	4798      	blx	r3
	
	usart_write_line(WIFI_USART, "set comm_gpio 21\r\n");
  401a0e:	492c      	ldr	r1, [pc, #176]	; (401ac0 <main+0xd4>)
  401a10:	482c      	ldr	r0, [pc, #176]	; (401ac4 <main+0xd8>)
  401a12:	4b2d      	ldr	r3, [pc, #180]	; (401ac8 <main+0xdc>)
  401a14:	4798      	blx	r3
	
	ioport_set_pin_level(LED_PIN, 0);
  401a16:	2100      	movs	r1, #0
  401a18:	2017      	movs	r0, #23
  401a1a:	4b2c      	ldr	r3, [pc, #176]	; (401acc <main+0xe0>)
  401a1c:	4798      	blx	r3

	while(1) {
		usart_write_line(WIFI_USART, "test\r\n");
  401a1e:	492c      	ldr	r1, [pc, #176]	; (401ad0 <main+0xe4>)
  401a20:	4828      	ldr	r0, [pc, #160]	; (401ac4 <main+0xd8>)
  401a22:	4b29      	ldr	r3, [pc, #164]	; (401ac8 <main+0xdc>)
  401a24:	4798      	blx	r3
		//ioport_toggle_pin_level(LED_PIN);
		delay_ms(500);
  401a26:	4b2b      	ldr	r3, [pc, #172]	; (401ad4 <main+0xe8>)
  401a28:	4798      	blx	r3
  401a2a:	4603      	mov	r3, r0
  401a2c:	4619      	mov	r1, r3
  401a2e:	f04f 0200 	mov.w	r2, #0
  401a32:	460b      	mov	r3, r1
  401a34:	4614      	mov	r4, r2
  401a36:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  401a3a:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
  401a3e:	ea4f 1a43 	mov.w	sl, r3, lsl #5
  401a42:	4653      	mov	r3, sl
  401a44:	465c      	mov	r4, fp
  401a46:	1a5b      	subs	r3, r3, r1
  401a48:	eb64 0402 	sbc.w	r4, r4, r2
  401a4c:	ea4f 0984 	mov.w	r9, r4, lsl #2
  401a50:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  401a54:	ea4f 0883 	mov.w	r8, r3, lsl #2
  401a58:	4643      	mov	r3, r8
  401a5a:	464c      	mov	r4, r9
  401a5c:	185b      	adds	r3, r3, r1
  401a5e:	eb44 0402 	adc.w	r4, r4, r2
  401a62:	00a2      	lsls	r2, r4, #2
  401a64:	607a      	str	r2, [r7, #4]
  401a66:	687a      	ldr	r2, [r7, #4]
  401a68:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
  401a6c:	607a      	str	r2, [r7, #4]
  401a6e:	009b      	lsls	r3, r3, #2
  401a70:	603b      	str	r3, [r7, #0]
  401a72:	e9d7 3400 	ldrd	r3, r4, [r7]
  401a76:	4619      	mov	r1, r3
  401a78:	4622      	mov	r2, r4
  401a7a:	f243 63af 	movw	r3, #13999	; 0x36af
  401a7e:	f04f 0400 	mov.w	r4, #0
  401a82:	18cd      	adds	r5, r1, r3
  401a84:	eb42 0604 	adc.w	r6, r2, r4
  401a88:	4628      	mov	r0, r5
  401a8a:	4631      	mov	r1, r6
  401a8c:	4c12      	ldr	r4, [pc, #72]	; (401ad8 <main+0xec>)
  401a8e:	f243 62b0 	movw	r2, #14000	; 0x36b0
  401a92:	f04f 0300 	mov.w	r3, #0
  401a96:	47a0      	blx	r4
  401a98:	4603      	mov	r3, r0
  401a9a:	460c      	mov	r4, r1
  401a9c:	4618      	mov	r0, r3
  401a9e:	4b0f      	ldr	r3, [pc, #60]	; (401adc <main+0xf0>)
  401aa0:	4798      	blx	r3
		usart_write_line(WIFI_USART, "test\r\n");
  401aa2:	e7bc      	b.n	401a1e <main+0x32>
  401aa4:	0040158d 	.word	0x0040158d
  401aa8:	00400901 	.word	0x00400901
  401aac:	00401969 	.word	0x00401969
  401ab0:	400e1450 	.word	0x400e1450
  401ab4:	004010f9 	.word	0x004010f9
  401ab8:	004013b1 	.word	0x004013b1
  401abc:	0040144d 	.word	0x0040144d
  401ac0:	0040263c 	.word	0x0040263c
  401ac4:	40024000 	.word	0x40024000
  401ac8:	00400595 	.word	0x00400595
  401acc:	00401981 	.word	0x00401981
  401ad0:	00402650 	.word	0x00402650
  401ad4:	00401939 	.word	0x00401939
  401ad8:	00401ae1 	.word	0x00401ae1
  401adc:	20000001 	.word	0x20000001

00401ae0 <__aeabi_uldivmod>:
  401ae0:	b953      	cbnz	r3, 401af8 <__aeabi_uldivmod+0x18>
  401ae2:	b94a      	cbnz	r2, 401af8 <__aeabi_uldivmod+0x18>
  401ae4:	2900      	cmp	r1, #0
  401ae6:	bf08      	it	eq
  401ae8:	2800      	cmpeq	r0, #0
  401aea:	bf1c      	itt	ne
  401aec:	f04f 31ff 	movne.w	r1, #4294967295
  401af0:	f04f 30ff 	movne.w	r0, #4294967295
  401af4:	f000 b97a 	b.w	401dec <__aeabi_idiv0>
  401af8:	f1ad 0c08 	sub.w	ip, sp, #8
  401afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401b00:	f000 f806 	bl	401b10 <__udivmoddi4>
  401b04:	f8dd e004 	ldr.w	lr, [sp, #4]
  401b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401b0c:	b004      	add	sp, #16
  401b0e:	4770      	bx	lr

00401b10 <__udivmoddi4>:
  401b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b14:	468c      	mov	ip, r1
  401b16:	460d      	mov	r5, r1
  401b18:	4604      	mov	r4, r0
  401b1a:	9e08      	ldr	r6, [sp, #32]
  401b1c:	2b00      	cmp	r3, #0
  401b1e:	d151      	bne.n	401bc4 <__udivmoddi4+0xb4>
  401b20:	428a      	cmp	r2, r1
  401b22:	4617      	mov	r7, r2
  401b24:	d96d      	bls.n	401c02 <__udivmoddi4+0xf2>
  401b26:	fab2 fe82 	clz	lr, r2
  401b2a:	f1be 0f00 	cmp.w	lr, #0
  401b2e:	d00b      	beq.n	401b48 <__udivmoddi4+0x38>
  401b30:	f1ce 0c20 	rsb	ip, lr, #32
  401b34:	fa01 f50e 	lsl.w	r5, r1, lr
  401b38:	fa20 fc0c 	lsr.w	ip, r0, ip
  401b3c:	fa02 f70e 	lsl.w	r7, r2, lr
  401b40:	ea4c 0c05 	orr.w	ip, ip, r5
  401b44:	fa00 f40e 	lsl.w	r4, r0, lr
  401b48:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401b4c:	0c25      	lsrs	r5, r4, #16
  401b4e:	fbbc f8fa 	udiv	r8, ip, sl
  401b52:	fa1f f987 	uxth.w	r9, r7
  401b56:	fb0a cc18 	mls	ip, sl, r8, ip
  401b5a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401b5e:	fb08 f309 	mul.w	r3, r8, r9
  401b62:	42ab      	cmp	r3, r5
  401b64:	d90a      	bls.n	401b7c <__udivmoddi4+0x6c>
  401b66:	19ed      	adds	r5, r5, r7
  401b68:	f108 32ff 	add.w	r2, r8, #4294967295
  401b6c:	f080 8123 	bcs.w	401db6 <__udivmoddi4+0x2a6>
  401b70:	42ab      	cmp	r3, r5
  401b72:	f240 8120 	bls.w	401db6 <__udivmoddi4+0x2a6>
  401b76:	f1a8 0802 	sub.w	r8, r8, #2
  401b7a:	443d      	add	r5, r7
  401b7c:	1aed      	subs	r5, r5, r3
  401b7e:	b2a4      	uxth	r4, r4
  401b80:	fbb5 f0fa 	udiv	r0, r5, sl
  401b84:	fb0a 5510 	mls	r5, sl, r0, r5
  401b88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401b8c:	fb00 f909 	mul.w	r9, r0, r9
  401b90:	45a1      	cmp	r9, r4
  401b92:	d909      	bls.n	401ba8 <__udivmoddi4+0x98>
  401b94:	19e4      	adds	r4, r4, r7
  401b96:	f100 33ff 	add.w	r3, r0, #4294967295
  401b9a:	f080 810a 	bcs.w	401db2 <__udivmoddi4+0x2a2>
  401b9e:	45a1      	cmp	r9, r4
  401ba0:	f240 8107 	bls.w	401db2 <__udivmoddi4+0x2a2>
  401ba4:	3802      	subs	r0, #2
  401ba6:	443c      	add	r4, r7
  401ba8:	eba4 0409 	sub.w	r4, r4, r9
  401bac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401bb0:	2100      	movs	r1, #0
  401bb2:	2e00      	cmp	r6, #0
  401bb4:	d061      	beq.n	401c7a <__udivmoddi4+0x16a>
  401bb6:	fa24 f40e 	lsr.w	r4, r4, lr
  401bba:	2300      	movs	r3, #0
  401bbc:	6034      	str	r4, [r6, #0]
  401bbe:	6073      	str	r3, [r6, #4]
  401bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bc4:	428b      	cmp	r3, r1
  401bc6:	d907      	bls.n	401bd8 <__udivmoddi4+0xc8>
  401bc8:	2e00      	cmp	r6, #0
  401bca:	d054      	beq.n	401c76 <__udivmoddi4+0x166>
  401bcc:	2100      	movs	r1, #0
  401bce:	e886 0021 	stmia.w	r6, {r0, r5}
  401bd2:	4608      	mov	r0, r1
  401bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bd8:	fab3 f183 	clz	r1, r3
  401bdc:	2900      	cmp	r1, #0
  401bde:	f040 808e 	bne.w	401cfe <__udivmoddi4+0x1ee>
  401be2:	42ab      	cmp	r3, r5
  401be4:	d302      	bcc.n	401bec <__udivmoddi4+0xdc>
  401be6:	4282      	cmp	r2, r0
  401be8:	f200 80fa 	bhi.w	401de0 <__udivmoddi4+0x2d0>
  401bec:	1a84      	subs	r4, r0, r2
  401bee:	eb65 0503 	sbc.w	r5, r5, r3
  401bf2:	2001      	movs	r0, #1
  401bf4:	46ac      	mov	ip, r5
  401bf6:	2e00      	cmp	r6, #0
  401bf8:	d03f      	beq.n	401c7a <__udivmoddi4+0x16a>
  401bfa:	e886 1010 	stmia.w	r6, {r4, ip}
  401bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c02:	b912      	cbnz	r2, 401c0a <__udivmoddi4+0xfa>
  401c04:	2701      	movs	r7, #1
  401c06:	fbb7 f7f2 	udiv	r7, r7, r2
  401c0a:	fab7 fe87 	clz	lr, r7
  401c0e:	f1be 0f00 	cmp.w	lr, #0
  401c12:	d134      	bne.n	401c7e <__udivmoddi4+0x16e>
  401c14:	1beb      	subs	r3, r5, r7
  401c16:	0c3a      	lsrs	r2, r7, #16
  401c18:	fa1f fc87 	uxth.w	ip, r7
  401c1c:	2101      	movs	r1, #1
  401c1e:	fbb3 f8f2 	udiv	r8, r3, r2
  401c22:	0c25      	lsrs	r5, r4, #16
  401c24:	fb02 3318 	mls	r3, r2, r8, r3
  401c28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401c2c:	fb0c f308 	mul.w	r3, ip, r8
  401c30:	42ab      	cmp	r3, r5
  401c32:	d907      	bls.n	401c44 <__udivmoddi4+0x134>
  401c34:	19ed      	adds	r5, r5, r7
  401c36:	f108 30ff 	add.w	r0, r8, #4294967295
  401c3a:	d202      	bcs.n	401c42 <__udivmoddi4+0x132>
  401c3c:	42ab      	cmp	r3, r5
  401c3e:	f200 80d1 	bhi.w	401de4 <__udivmoddi4+0x2d4>
  401c42:	4680      	mov	r8, r0
  401c44:	1aed      	subs	r5, r5, r3
  401c46:	b2a3      	uxth	r3, r4
  401c48:	fbb5 f0f2 	udiv	r0, r5, r2
  401c4c:	fb02 5510 	mls	r5, r2, r0, r5
  401c50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401c54:	fb0c fc00 	mul.w	ip, ip, r0
  401c58:	45a4      	cmp	ip, r4
  401c5a:	d907      	bls.n	401c6c <__udivmoddi4+0x15c>
  401c5c:	19e4      	adds	r4, r4, r7
  401c5e:	f100 33ff 	add.w	r3, r0, #4294967295
  401c62:	d202      	bcs.n	401c6a <__udivmoddi4+0x15a>
  401c64:	45a4      	cmp	ip, r4
  401c66:	f200 80b8 	bhi.w	401dda <__udivmoddi4+0x2ca>
  401c6a:	4618      	mov	r0, r3
  401c6c:	eba4 040c 	sub.w	r4, r4, ip
  401c70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401c74:	e79d      	b.n	401bb2 <__udivmoddi4+0xa2>
  401c76:	4631      	mov	r1, r6
  401c78:	4630      	mov	r0, r6
  401c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c7e:	f1ce 0420 	rsb	r4, lr, #32
  401c82:	fa05 f30e 	lsl.w	r3, r5, lr
  401c86:	fa07 f70e 	lsl.w	r7, r7, lr
  401c8a:	fa20 f804 	lsr.w	r8, r0, r4
  401c8e:	0c3a      	lsrs	r2, r7, #16
  401c90:	fa25 f404 	lsr.w	r4, r5, r4
  401c94:	ea48 0803 	orr.w	r8, r8, r3
  401c98:	fbb4 f1f2 	udiv	r1, r4, r2
  401c9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401ca0:	fb02 4411 	mls	r4, r2, r1, r4
  401ca4:	fa1f fc87 	uxth.w	ip, r7
  401ca8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401cac:	fb01 f30c 	mul.w	r3, r1, ip
  401cb0:	42ab      	cmp	r3, r5
  401cb2:	fa00 f40e 	lsl.w	r4, r0, lr
  401cb6:	d909      	bls.n	401ccc <__udivmoddi4+0x1bc>
  401cb8:	19ed      	adds	r5, r5, r7
  401cba:	f101 30ff 	add.w	r0, r1, #4294967295
  401cbe:	f080 808a 	bcs.w	401dd6 <__udivmoddi4+0x2c6>
  401cc2:	42ab      	cmp	r3, r5
  401cc4:	f240 8087 	bls.w	401dd6 <__udivmoddi4+0x2c6>
  401cc8:	3902      	subs	r1, #2
  401cca:	443d      	add	r5, r7
  401ccc:	1aeb      	subs	r3, r5, r3
  401cce:	fa1f f588 	uxth.w	r5, r8
  401cd2:	fbb3 f0f2 	udiv	r0, r3, r2
  401cd6:	fb02 3310 	mls	r3, r2, r0, r3
  401cda:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401cde:	fb00 f30c 	mul.w	r3, r0, ip
  401ce2:	42ab      	cmp	r3, r5
  401ce4:	d907      	bls.n	401cf6 <__udivmoddi4+0x1e6>
  401ce6:	19ed      	adds	r5, r5, r7
  401ce8:	f100 38ff 	add.w	r8, r0, #4294967295
  401cec:	d26f      	bcs.n	401dce <__udivmoddi4+0x2be>
  401cee:	42ab      	cmp	r3, r5
  401cf0:	d96d      	bls.n	401dce <__udivmoddi4+0x2be>
  401cf2:	3802      	subs	r0, #2
  401cf4:	443d      	add	r5, r7
  401cf6:	1aeb      	subs	r3, r5, r3
  401cf8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401cfc:	e78f      	b.n	401c1e <__udivmoddi4+0x10e>
  401cfe:	f1c1 0720 	rsb	r7, r1, #32
  401d02:	fa22 f807 	lsr.w	r8, r2, r7
  401d06:	408b      	lsls	r3, r1
  401d08:	fa05 f401 	lsl.w	r4, r5, r1
  401d0c:	ea48 0303 	orr.w	r3, r8, r3
  401d10:	fa20 fe07 	lsr.w	lr, r0, r7
  401d14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401d18:	40fd      	lsrs	r5, r7
  401d1a:	ea4e 0e04 	orr.w	lr, lr, r4
  401d1e:	fbb5 f9fc 	udiv	r9, r5, ip
  401d22:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401d26:	fb0c 5519 	mls	r5, ip, r9, r5
  401d2a:	fa1f f883 	uxth.w	r8, r3
  401d2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401d32:	fb09 f408 	mul.w	r4, r9, r8
  401d36:	42ac      	cmp	r4, r5
  401d38:	fa02 f201 	lsl.w	r2, r2, r1
  401d3c:	fa00 fa01 	lsl.w	sl, r0, r1
  401d40:	d908      	bls.n	401d54 <__udivmoddi4+0x244>
  401d42:	18ed      	adds	r5, r5, r3
  401d44:	f109 30ff 	add.w	r0, r9, #4294967295
  401d48:	d243      	bcs.n	401dd2 <__udivmoddi4+0x2c2>
  401d4a:	42ac      	cmp	r4, r5
  401d4c:	d941      	bls.n	401dd2 <__udivmoddi4+0x2c2>
  401d4e:	f1a9 0902 	sub.w	r9, r9, #2
  401d52:	441d      	add	r5, r3
  401d54:	1b2d      	subs	r5, r5, r4
  401d56:	fa1f fe8e 	uxth.w	lr, lr
  401d5a:	fbb5 f0fc 	udiv	r0, r5, ip
  401d5e:	fb0c 5510 	mls	r5, ip, r0, r5
  401d62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401d66:	fb00 f808 	mul.w	r8, r0, r8
  401d6a:	45a0      	cmp	r8, r4
  401d6c:	d907      	bls.n	401d7e <__udivmoddi4+0x26e>
  401d6e:	18e4      	adds	r4, r4, r3
  401d70:	f100 35ff 	add.w	r5, r0, #4294967295
  401d74:	d229      	bcs.n	401dca <__udivmoddi4+0x2ba>
  401d76:	45a0      	cmp	r8, r4
  401d78:	d927      	bls.n	401dca <__udivmoddi4+0x2ba>
  401d7a:	3802      	subs	r0, #2
  401d7c:	441c      	add	r4, r3
  401d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401d82:	eba4 0408 	sub.w	r4, r4, r8
  401d86:	fba0 8902 	umull	r8, r9, r0, r2
  401d8a:	454c      	cmp	r4, r9
  401d8c:	46c6      	mov	lr, r8
  401d8e:	464d      	mov	r5, r9
  401d90:	d315      	bcc.n	401dbe <__udivmoddi4+0x2ae>
  401d92:	d012      	beq.n	401dba <__udivmoddi4+0x2aa>
  401d94:	b156      	cbz	r6, 401dac <__udivmoddi4+0x29c>
  401d96:	ebba 030e 	subs.w	r3, sl, lr
  401d9a:	eb64 0405 	sbc.w	r4, r4, r5
  401d9e:	fa04 f707 	lsl.w	r7, r4, r7
  401da2:	40cb      	lsrs	r3, r1
  401da4:	431f      	orrs	r7, r3
  401da6:	40cc      	lsrs	r4, r1
  401da8:	6037      	str	r7, [r6, #0]
  401daa:	6074      	str	r4, [r6, #4]
  401dac:	2100      	movs	r1, #0
  401dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401db2:	4618      	mov	r0, r3
  401db4:	e6f8      	b.n	401ba8 <__udivmoddi4+0x98>
  401db6:	4690      	mov	r8, r2
  401db8:	e6e0      	b.n	401b7c <__udivmoddi4+0x6c>
  401dba:	45c2      	cmp	sl, r8
  401dbc:	d2ea      	bcs.n	401d94 <__udivmoddi4+0x284>
  401dbe:	ebb8 0e02 	subs.w	lr, r8, r2
  401dc2:	eb69 0503 	sbc.w	r5, r9, r3
  401dc6:	3801      	subs	r0, #1
  401dc8:	e7e4      	b.n	401d94 <__udivmoddi4+0x284>
  401dca:	4628      	mov	r0, r5
  401dcc:	e7d7      	b.n	401d7e <__udivmoddi4+0x26e>
  401dce:	4640      	mov	r0, r8
  401dd0:	e791      	b.n	401cf6 <__udivmoddi4+0x1e6>
  401dd2:	4681      	mov	r9, r0
  401dd4:	e7be      	b.n	401d54 <__udivmoddi4+0x244>
  401dd6:	4601      	mov	r1, r0
  401dd8:	e778      	b.n	401ccc <__udivmoddi4+0x1bc>
  401dda:	3802      	subs	r0, #2
  401ddc:	443c      	add	r4, r7
  401dde:	e745      	b.n	401c6c <__udivmoddi4+0x15c>
  401de0:	4608      	mov	r0, r1
  401de2:	e708      	b.n	401bf6 <__udivmoddi4+0xe6>
  401de4:	f1a8 0802 	sub.w	r8, r8, #2
  401de8:	443d      	add	r5, r7
  401dea:	e72b      	b.n	401c44 <__udivmoddi4+0x134>

00401dec <__aeabi_idiv0>:
  401dec:	4770      	bx	lr
  401dee:	bf00      	nop

00401df0 <__libc_init_array>:
  401df0:	b570      	push	{r4, r5, r6, lr}
  401df2:	4e0f      	ldr	r6, [pc, #60]	; (401e30 <__libc_init_array+0x40>)
  401df4:	4d0f      	ldr	r5, [pc, #60]	; (401e34 <__libc_init_array+0x44>)
  401df6:	1b76      	subs	r6, r6, r5
  401df8:	10b6      	asrs	r6, r6, #2
  401dfa:	bf18      	it	ne
  401dfc:	2400      	movne	r4, #0
  401dfe:	d005      	beq.n	401e0c <__libc_init_array+0x1c>
  401e00:	3401      	adds	r4, #1
  401e02:	f855 3b04 	ldr.w	r3, [r5], #4
  401e06:	4798      	blx	r3
  401e08:	42a6      	cmp	r6, r4
  401e0a:	d1f9      	bne.n	401e00 <__libc_init_array+0x10>
  401e0c:	4e0a      	ldr	r6, [pc, #40]	; (401e38 <__libc_init_array+0x48>)
  401e0e:	4d0b      	ldr	r5, [pc, #44]	; (401e3c <__libc_init_array+0x4c>)
  401e10:	1b76      	subs	r6, r6, r5
  401e12:	f000 fc23 	bl	40265c <_init>
  401e16:	10b6      	asrs	r6, r6, #2
  401e18:	bf18      	it	ne
  401e1a:	2400      	movne	r4, #0
  401e1c:	d006      	beq.n	401e2c <__libc_init_array+0x3c>
  401e1e:	3401      	adds	r4, #1
  401e20:	f855 3b04 	ldr.w	r3, [r5], #4
  401e24:	4798      	blx	r3
  401e26:	42a6      	cmp	r6, r4
  401e28:	d1f9      	bne.n	401e1e <__libc_init_array+0x2e>
  401e2a:	bd70      	pop	{r4, r5, r6, pc}
  401e2c:	bd70      	pop	{r4, r5, r6, pc}
  401e2e:	bf00      	nop
  401e30:	00402668 	.word	0x00402668
  401e34:	00402668 	.word	0x00402668
  401e38:	00402670 	.word	0x00402670
  401e3c:	00402668 	.word	0x00402668

00401e40 <critical_factorization>:
  401e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401e44:	f04f 0e01 	mov.w	lr, #1
  401e48:	4674      	mov	r4, lr
  401e4a:	2500      	movs	r5, #0
  401e4c:	f04f 36ff 	mov.w	r6, #4294967295
  401e50:	192b      	adds	r3, r5, r4
  401e52:	428b      	cmp	r3, r1
  401e54:	eb00 0706 	add.w	r7, r0, r6
  401e58:	d20d      	bcs.n	401e76 <critical_factorization+0x36>
  401e5a:	5d3f      	ldrb	r7, [r7, r4]
  401e5c:	f810 c003 	ldrb.w	ip, [r0, r3]
  401e60:	45bc      	cmp	ip, r7
  401e62:	d22d      	bcs.n	401ec0 <critical_factorization+0x80>
  401e64:	461d      	mov	r5, r3
  401e66:	2401      	movs	r4, #1
  401e68:	eba3 0e06 	sub.w	lr, r3, r6
  401e6c:	192b      	adds	r3, r5, r4
  401e6e:	428b      	cmp	r3, r1
  401e70:	eb00 0706 	add.w	r7, r0, r6
  401e74:	d3f1      	bcc.n	401e5a <critical_factorization+0x1a>
  401e76:	f04f 0801 	mov.w	r8, #1
  401e7a:	f8c2 e000 	str.w	lr, [r2]
  401e7e:	4644      	mov	r4, r8
  401e80:	2500      	movs	r5, #0
  401e82:	f04f 37ff 	mov.w	r7, #4294967295
  401e86:	192b      	adds	r3, r5, r4
  401e88:	4299      	cmp	r1, r3
  401e8a:	eb00 0e07 	add.w	lr, r0, r7
  401e8e:	d90e      	bls.n	401eae <critical_factorization+0x6e>
  401e90:	f81e e004 	ldrb.w	lr, [lr, r4]
  401e94:	f810 c003 	ldrb.w	ip, [r0, r3]
  401e98:	45f4      	cmp	ip, lr
  401e9a:	d918      	bls.n	401ece <critical_factorization+0x8e>
  401e9c:	461d      	mov	r5, r3
  401e9e:	2401      	movs	r4, #1
  401ea0:	eba3 0807 	sub.w	r8, r3, r7
  401ea4:	192b      	adds	r3, r5, r4
  401ea6:	4299      	cmp	r1, r3
  401ea8:	eb00 0e07 	add.w	lr, r0, r7
  401eac:	d8f0      	bhi.n	401e90 <critical_factorization+0x50>
  401eae:	3701      	adds	r7, #1
  401eb0:	1c70      	adds	r0, r6, #1
  401eb2:	4287      	cmp	r7, r0
  401eb4:	bf24      	itt	cs
  401eb6:	f8c2 8000 	strcs.w	r8, [r2]
  401eba:	4638      	movcs	r0, r7
  401ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401ec0:	d00c      	beq.n	401edc <critical_factorization+0x9c>
  401ec2:	f04f 0e01 	mov.w	lr, #1
  401ec6:	462e      	mov	r6, r5
  401ec8:	4674      	mov	r4, lr
  401eca:	4475      	add	r5, lr
  401ecc:	e7c0      	b.n	401e50 <critical_factorization+0x10>
  401ece:	d00b      	beq.n	401ee8 <critical_factorization+0xa8>
  401ed0:	f04f 0801 	mov.w	r8, #1
  401ed4:	462f      	mov	r7, r5
  401ed6:	4644      	mov	r4, r8
  401ed8:	4445      	add	r5, r8
  401eda:	e7d4      	b.n	401e86 <critical_factorization+0x46>
  401edc:	4574      	cmp	r4, lr
  401ede:	bf12      	itee	ne
  401ee0:	3401      	addne	r4, #1
  401ee2:	461d      	moveq	r5, r3
  401ee4:	2401      	moveq	r4, #1
  401ee6:	e7b3      	b.n	401e50 <critical_factorization+0x10>
  401ee8:	4544      	cmp	r4, r8
  401eea:	bf12      	itee	ne
  401eec:	3401      	addne	r4, #1
  401eee:	461d      	moveq	r5, r3
  401ef0:	2401      	moveq	r4, #1
  401ef2:	e7c8      	b.n	401e86 <critical_factorization+0x46>

00401ef4 <two_way_long_needle>:
  401ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ef8:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  401efc:	4616      	mov	r6, r2
  401efe:	4605      	mov	r5, r0
  401f00:	468b      	mov	fp, r1
  401f02:	4610      	mov	r0, r2
  401f04:	4619      	mov	r1, r3
  401f06:	aa03      	add	r2, sp, #12
  401f08:	461c      	mov	r4, r3
  401f0a:	f7ff ff99 	bl	401e40 <critical_factorization>
  401f0e:	ab03      	add	r3, sp, #12
  401f10:	4681      	mov	r9, r0
  401f12:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  401f16:	f843 4f04 	str.w	r4, [r3, #4]!
  401f1a:	4293      	cmp	r3, r2
  401f1c:	d1fb      	bne.n	401f16 <two_way_long_needle+0x22>
  401f1e:	b14c      	cbz	r4, 401f34 <two_way_long_needle+0x40>
  401f20:	1e63      	subs	r3, r4, #1
  401f22:	1e72      	subs	r2, r6, #1
  401f24:	a804      	add	r0, sp, #16
  401f26:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  401f2a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  401f2e:	f113 33ff 	adds.w	r3, r3, #4294967295
  401f32:	d2f8      	bcs.n	401f26 <two_way_long_needle+0x32>
  401f34:	9903      	ldr	r1, [sp, #12]
  401f36:	464a      	mov	r2, r9
  401f38:	4431      	add	r1, r6
  401f3a:	4630      	mov	r0, r6
  401f3c:	f000 fa68 	bl	402410 <memcmp>
  401f40:	2800      	cmp	r0, #0
  401f42:	d16f      	bne.n	402024 <two_way_long_needle+0x130>
  401f44:	f109 33ff 	add.w	r3, r9, #4294967295
  401f48:	9300      	str	r3, [sp, #0]
  401f4a:	18f3      	adds	r3, r6, r3
  401f4c:	4682      	mov	sl, r0
  401f4e:	9301      	str	r3, [sp, #4]
  401f50:	4623      	mov	r3, r4
  401f52:	4680      	mov	r8, r0
  401f54:	4654      	mov	r4, sl
  401f56:	4658      	mov	r0, fp
  401f58:	469a      	mov	sl, r3
  401f5a:	eb08 070a 	add.w	r7, r8, sl
  401f5e:	1a3a      	subs	r2, r7, r0
  401f60:	2100      	movs	r1, #0
  401f62:	4428      	add	r0, r5
  401f64:	f000 fa04 	bl	402370 <memchr>
  401f68:	2800      	cmp	r0, #0
  401f6a:	d156      	bne.n	40201a <two_way_long_needle+0x126>
  401f6c:	2f00      	cmp	r7, #0
  401f6e:	d054      	beq.n	40201a <two_way_long_needle+0x126>
  401f70:	19eb      	adds	r3, r5, r7
  401f72:	aa04      	add	r2, sp, #16
  401f74:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  401f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401f7c:	b14b      	cbz	r3, 401f92 <two_way_long_needle+0x9e>
  401f7e:	b124      	cbz	r4, 401f8a <two_way_long_needle+0x96>
  401f80:	9a03      	ldr	r2, [sp, #12]
  401f82:	4293      	cmp	r3, r2
  401f84:	d201      	bcs.n	401f8a <two_way_long_needle+0x96>
  401f86:	ebaa 0302 	sub.w	r3, sl, r2
  401f8a:	4498      	add	r8, r3
  401f8c:	2400      	movs	r4, #0
  401f8e:	4638      	mov	r0, r7
  401f90:	e7e3      	b.n	401f5a <two_way_long_needle+0x66>
  401f92:	454c      	cmp	r4, r9
  401f94:	4623      	mov	r3, r4
  401f96:	f10a 3eff 	add.w	lr, sl, #4294967295
  401f9a:	bf38      	it	cc
  401f9c:	464b      	movcc	r3, r9
  401f9e:	4573      	cmp	r3, lr
  401fa0:	d213      	bcs.n	401fca <two_way_long_needle+0xd6>
  401fa2:	eb08 0203 	add.w	r2, r8, r3
  401fa6:	f816 c003 	ldrb.w	ip, [r6, r3]
  401faa:	5ca8      	ldrb	r0, [r5, r2]
  401fac:	4584      	cmp	ip, r0
  401fae:	442a      	add	r2, r5
  401fb0:	eb06 0103 	add.w	r1, r6, r3
  401fb4:	d006      	beq.n	401fc4 <two_way_long_needle+0xd0>
  401fb6:	e02c      	b.n	402012 <two_way_long_needle+0x11e>
  401fb8:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  401fbc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  401fc0:	4584      	cmp	ip, r0
  401fc2:	d126      	bne.n	402012 <two_way_long_needle+0x11e>
  401fc4:	3301      	adds	r3, #1
  401fc6:	4573      	cmp	r3, lr
  401fc8:	d3f6      	bcc.n	401fb8 <two_way_long_needle+0xc4>
  401fca:	454c      	cmp	r4, r9
  401fcc:	9900      	ldr	r1, [sp, #0]
  401fce:	f080 8089 	bcs.w	4020e4 <two_way_long_needle+0x1f0>
  401fd2:	9b00      	ldr	r3, [sp, #0]
  401fd4:	eb08 0203 	add.w	r2, r8, r3
  401fd8:	9b01      	ldr	r3, [sp, #4]
  401fda:	5ca8      	ldrb	r0, [r5, r2]
  401fdc:	781b      	ldrb	r3, [r3, #0]
  401fde:	4298      	cmp	r0, r3
  401fe0:	442a      	add	r2, r5
  401fe2:	d17f      	bne.n	4020e4 <two_way_long_needle+0x1f0>
  401fe4:	9801      	ldr	r0, [sp, #4]
  401fe6:	f104 3bff 	add.w	fp, r4, #4294967295
  401fea:	e006      	b.n	401ffa <two_way_long_needle+0x106>
  401fec:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  401ff0:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  401ff4:	45f4      	cmp	ip, lr
  401ff6:	d103      	bne.n	402000 <two_way_long_needle+0x10c>
  401ff8:	4619      	mov	r1, r3
  401ffa:	1e4b      	subs	r3, r1, #1
  401ffc:	459b      	cmp	fp, r3
  401ffe:	d1f5      	bne.n	401fec <two_way_long_needle+0xf8>
  402000:	3401      	adds	r4, #1
  402002:	428c      	cmp	r4, r1
  402004:	d870      	bhi.n	4020e8 <two_way_long_needle+0x1f4>
  402006:	9c03      	ldr	r4, [sp, #12]
  402008:	4638      	mov	r0, r7
  40200a:	44a0      	add	r8, r4
  40200c:	ebaa 0404 	sub.w	r4, sl, r4
  402010:	e7a3      	b.n	401f5a <two_way_long_needle+0x66>
  402012:	f1c9 0201 	rsb	r2, r9, #1
  402016:	4490      	add	r8, r2
  402018:	e7b7      	b.n	401f8a <two_way_long_needle+0x96>
  40201a:	2000      	movs	r0, #0
  40201c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  402020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402024:	eba4 0309 	sub.w	r3, r4, r9
  402028:	454b      	cmp	r3, r9
  40202a:	bf38      	it	cc
  40202c:	464b      	movcc	r3, r9
  40202e:	3301      	adds	r3, #1
  402030:	f109 38ff 	add.w	r8, r9, #4294967295
  402034:	9303      	str	r3, [sp, #12]
  402036:	eb06 0308 	add.w	r3, r6, r8
  40203a:	4658      	mov	r0, fp
  40203c:	f04f 0a00 	mov.w	sl, #0
  402040:	46cb      	mov	fp, r9
  402042:	4699      	mov	r9, r3
  402044:	eb0a 0704 	add.w	r7, sl, r4
  402048:	1a3a      	subs	r2, r7, r0
  40204a:	2100      	movs	r1, #0
  40204c:	4428      	add	r0, r5
  40204e:	f000 f98f 	bl	402370 <memchr>
  402052:	2800      	cmp	r0, #0
  402054:	d1e1      	bne.n	40201a <two_way_long_needle+0x126>
  402056:	2f00      	cmp	r7, #0
  402058:	d0df      	beq.n	40201a <two_way_long_needle+0x126>
  40205a:	19eb      	adds	r3, r5, r7
  40205c:	aa04      	add	r2, sp, #16
  40205e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  402062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  402066:	bba3      	cbnz	r3, 4020d2 <two_way_long_needle+0x1de>
  402068:	1e61      	subs	r1, r4, #1
  40206a:	458b      	cmp	fp, r1
  40206c:	d215      	bcs.n	40209a <two_way_long_needle+0x1a6>
  40206e:	eb0a 020b 	add.w	r2, sl, fp
  402072:	f816 300b 	ldrb.w	r3, [r6, fp]
  402076:	f815 e002 	ldrb.w	lr, [r5, r2]
  40207a:	459e      	cmp	lr, r3
  40207c:	442a      	add	r2, r5
  40207e:	eb06 000b 	add.w	r0, r6, fp
  402082:	465b      	mov	r3, fp
  402084:	d006      	beq.n	402094 <two_way_long_needle+0x1a0>
  402086:	e027      	b.n	4020d8 <two_way_long_needle+0x1e4>
  402088:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  40208c:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  402090:	45f4      	cmp	ip, lr
  402092:	d121      	bne.n	4020d8 <two_way_long_needle+0x1e4>
  402094:	3301      	adds	r3, #1
  402096:	428b      	cmp	r3, r1
  402098:	d3f6      	bcc.n	402088 <two_way_long_needle+0x194>
  40209a:	f1b8 3fff 	cmp.w	r8, #4294967295
  40209e:	d011      	beq.n	4020c4 <two_way_long_needle+0x1d0>
  4020a0:	eb0a 0208 	add.w	r2, sl, r8
  4020a4:	f899 1000 	ldrb.w	r1, [r9]
  4020a8:	5cab      	ldrb	r3, [r5, r2]
  4020aa:	4299      	cmp	r1, r3
  4020ac:	442a      	add	r2, r5
  4020ae:	d10f      	bne.n	4020d0 <two_way_long_needle+0x1dc>
  4020b0:	464b      	mov	r3, r9
  4020b2:	e005      	b.n	4020c0 <two_way_long_needle+0x1cc>
  4020b4:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  4020b8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4020bc:	4288      	cmp	r0, r1
  4020be:	d107      	bne.n	4020d0 <two_way_long_needle+0x1dc>
  4020c0:	42b3      	cmp	r3, r6
  4020c2:	d1f7      	bne.n	4020b4 <two_way_long_needle+0x1c0>
  4020c4:	eb05 000a 	add.w	r0, r5, sl
  4020c8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4020cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020d0:	9b03      	ldr	r3, [sp, #12]
  4020d2:	449a      	add	sl, r3
  4020d4:	4638      	mov	r0, r7
  4020d6:	e7b5      	b.n	402044 <two_way_long_needle+0x150>
  4020d8:	f1cb 0201 	rsb	r2, fp, #1
  4020dc:	4492      	add	sl, r2
  4020de:	449a      	add	sl, r3
  4020e0:	4638      	mov	r0, r7
  4020e2:	e7af      	b.n	402044 <two_way_long_needle+0x150>
  4020e4:	4649      	mov	r1, r9
  4020e6:	e78b      	b.n	402000 <two_way_long_needle+0x10c>
  4020e8:	eb05 0008 	add.w	r0, r5, r8
  4020ec:	e796      	b.n	40201c <two_way_long_needle+0x128>
  4020ee:	bf00      	nop

004020f0 <strstr>:
  4020f0:	7802      	ldrb	r2, [r0, #0]
  4020f2:	2a00      	cmp	r2, #0
  4020f4:	f000 8101 	beq.w	4022fa <strstr+0x20a>
  4020f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020fc:	f891 8000 	ldrb.w	r8, [r1]
  402100:	b085      	sub	sp, #20
  402102:	4644      	mov	r4, r8
  402104:	f1b8 0f00 	cmp.w	r8, #0
  402108:	d016      	beq.n	402138 <strstr+0x48>
  40210a:	4686      	mov	lr, r0
  40210c:	f101 0c01 	add.w	ip, r1, #1
  402110:	2701      	movs	r7, #1
  402112:	e003      	b.n	40211c <strstr+0x2c>
  402114:	f813 4b01 	ldrb.w	r4, [r3], #1
  402118:	b16c      	cbz	r4, 402136 <strstr+0x46>
  40211a:	469c      	mov	ip, r3
  40211c:	42a2      	cmp	r2, r4
  40211e:	bf14      	ite	ne
  402120:	2700      	movne	r7, #0
  402122:	f007 0701 	andeq.w	r7, r7, #1
  402126:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  40212a:	4663      	mov	r3, ip
  40212c:	2a00      	cmp	r2, #0
  40212e:	d1f1      	bne.n	402114 <strstr+0x24>
  402130:	f89c 3000 	ldrb.w	r3, [ip]
  402134:	b9fb      	cbnz	r3, 402176 <strstr+0x86>
  402136:	b117      	cbz	r7, 40213e <strstr+0x4e>
  402138:	b005      	add	sp, #20
  40213a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40213e:	460e      	mov	r6, r1
  402140:	4605      	mov	r5, r0
  402142:	4641      	mov	r1, r8
  402144:	3001      	adds	r0, #1
  402146:	ebac 0406 	sub.w	r4, ip, r6
  40214a:	f000 f991 	bl	402470 <strchr>
  40214e:	4607      	mov	r7, r0
  402150:	b188      	cbz	r0, 402176 <strstr+0x86>
  402152:	2c01      	cmp	r4, #1
  402154:	d0f0      	beq.n	402138 <strstr+0x48>
  402156:	1928      	adds	r0, r5, r4
  402158:	4287      	cmp	r7, r0
  40215a:	bf94      	ite	ls
  40215c:	1bc1      	subls	r1, r0, r7
  40215e:	2101      	movhi	r1, #1
  402160:	2c1f      	cmp	r4, #31
  402162:	468b      	mov	fp, r1
  402164:	d90b      	bls.n	40217e <strstr+0x8e>
  402166:	4623      	mov	r3, r4
  402168:	4632      	mov	r2, r6
  40216a:	4638      	mov	r0, r7
  40216c:	f7ff fec2 	bl	401ef4 <two_way_long_needle>
  402170:	b005      	add	sp, #20
  402172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402176:	2000      	movs	r0, #0
  402178:	b005      	add	sp, #20
  40217a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40217e:	aa03      	add	r2, sp, #12
  402180:	4621      	mov	r1, r4
  402182:	4630      	mov	r0, r6
  402184:	f7ff fe5c 	bl	401e40 <critical_factorization>
  402188:	9903      	ldr	r1, [sp, #12]
  40218a:	4680      	mov	r8, r0
  40218c:	4602      	mov	r2, r0
  40218e:	4431      	add	r1, r6
  402190:	4630      	mov	r0, r6
  402192:	f000 f93d 	bl	402410 <memcmp>
  402196:	2800      	cmp	r0, #0
  402198:	d157      	bne.n	40224a <strstr+0x15a>
  40219a:	f108 33ff 	add.w	r3, r8, #4294967295
  40219e:	9300      	str	r3, [sp, #0]
  4021a0:	18f3      	adds	r3, r6, r3
  4021a2:	4681      	mov	r9, r0
  4021a4:	4605      	mov	r5, r0
  4021a6:	9301      	str	r3, [sp, #4]
  4021a8:	4658      	mov	r0, fp
  4021aa:	46b2      	mov	sl, r6
  4021ac:	1966      	adds	r6, r4, r5
  4021ae:	1a32      	subs	r2, r6, r0
  4021b0:	2100      	movs	r1, #0
  4021b2:	4438      	add	r0, r7
  4021b4:	f000 f8dc 	bl	402370 <memchr>
  4021b8:	2800      	cmp	r0, #0
  4021ba:	d1dc      	bne.n	402176 <strstr+0x86>
  4021bc:	2e00      	cmp	r6, #0
  4021be:	d0da      	beq.n	402176 <strstr+0x86>
  4021c0:	45c8      	cmp	r8, r9
  4021c2:	4643      	mov	r3, r8
  4021c4:	bf38      	it	cc
  4021c6:	464b      	movcc	r3, r9
  4021c8:	429c      	cmp	r4, r3
  4021ca:	d912      	bls.n	4021f2 <strstr+0x102>
  4021cc:	195a      	adds	r2, r3, r5
  4021ce:	f81a 1003 	ldrb.w	r1, [sl, r3]
  4021d2:	5cb8      	ldrb	r0, [r7, r2]
  4021d4:	4281      	cmp	r1, r0
  4021d6:	443a      	add	r2, r7
  4021d8:	eb0a 0e03 	add.w	lr, sl, r3
  4021dc:	d006      	beq.n	4021ec <strstr+0xfc>
  4021de:	e02c      	b.n	40223a <strstr+0x14a>
  4021e0:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  4021e4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4021e8:	4288      	cmp	r0, r1
  4021ea:	d126      	bne.n	40223a <strstr+0x14a>
  4021ec:	3301      	adds	r3, #1
  4021ee:	429c      	cmp	r4, r3
  4021f0:	d1f6      	bne.n	4021e0 <strstr+0xf0>
  4021f2:	45c8      	cmp	r8, r9
  4021f4:	9900      	ldr	r1, [sp, #0]
  4021f6:	f240 8083 	bls.w	402300 <strstr+0x210>
  4021fa:	9b00      	ldr	r3, [sp, #0]
  4021fc:	18ea      	adds	r2, r5, r3
  4021fe:	9b01      	ldr	r3, [sp, #4]
  402200:	5cb8      	ldrb	r0, [r7, r2]
  402202:	781b      	ldrb	r3, [r3, #0]
  402204:	4298      	cmp	r0, r3
  402206:	443a      	add	r2, r7
  402208:	d17a      	bne.n	402300 <strstr+0x210>
  40220a:	9801      	ldr	r0, [sp, #4]
  40220c:	f109 3bff 	add.w	fp, r9, #4294967295
  402210:	e006      	b.n	402220 <strstr+0x130>
  402212:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  402216:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  40221a:	45f4      	cmp	ip, lr
  40221c:	d103      	bne.n	402226 <strstr+0x136>
  40221e:	4619      	mov	r1, r3
  402220:	1e4b      	subs	r3, r1, #1
  402222:	455b      	cmp	r3, fp
  402224:	d1f5      	bne.n	402212 <strstr+0x122>
  402226:	f109 0901 	add.w	r9, r9, #1
  40222a:	4589      	cmp	r9, r1
  40222c:	d857      	bhi.n	4022de <strstr+0x1ee>
  40222e:	9b03      	ldr	r3, [sp, #12]
  402230:	4630      	mov	r0, r6
  402232:	441d      	add	r5, r3
  402234:	eba4 0903 	sub.w	r9, r4, r3
  402238:	e7b8      	b.n	4021ac <strstr+0xbc>
  40223a:	f1c8 0201 	rsb	r2, r8, #1
  40223e:	4415      	add	r5, r2
  402240:	441d      	add	r5, r3
  402242:	f04f 0900 	mov.w	r9, #0
  402246:	4630      	mov	r0, r6
  402248:	e7b0      	b.n	4021ac <strstr+0xbc>
  40224a:	eba4 0308 	sub.w	r3, r4, r8
  40224e:	4543      	cmp	r3, r8
  402250:	bf38      	it	cc
  402252:	4643      	movcc	r3, r8
  402254:	3301      	adds	r3, #1
  402256:	f108 39ff 	add.w	r9, r8, #4294967295
  40225a:	9303      	str	r3, [sp, #12]
  40225c:	eb06 0309 	add.w	r3, r6, r9
  402260:	4658      	mov	r0, fp
  402262:	2500      	movs	r5, #0
  402264:	46bb      	mov	fp, r7
  402266:	469a      	mov	sl, r3
  402268:	1967      	adds	r7, r4, r5
  40226a:	1a3a      	subs	r2, r7, r0
  40226c:	2100      	movs	r1, #0
  40226e:	4458      	add	r0, fp
  402270:	f000 f87e 	bl	402370 <memchr>
  402274:	2800      	cmp	r0, #0
  402276:	f47f af7e 	bne.w	402176 <strstr+0x86>
  40227a:	2f00      	cmp	r7, #0
  40227c:	f43f af7b 	beq.w	402176 <strstr+0x86>
  402280:	4544      	cmp	r4, r8
  402282:	d915      	bls.n	4022b0 <strstr+0x1c0>
  402284:	eb08 0205 	add.w	r2, r8, r5
  402288:	f816 3008 	ldrb.w	r3, [r6, r8]
  40228c:	f81b 0002 	ldrb.w	r0, [fp, r2]
  402290:	4298      	cmp	r0, r3
  402292:	445a      	add	r2, fp
  402294:	eb06 0108 	add.w	r1, r6, r8
  402298:	4643      	mov	r3, r8
  40229a:	d006      	beq.n	4022aa <strstr+0x1ba>
  40229c:	e023      	b.n	4022e6 <strstr+0x1f6>
  40229e:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  4022a2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  4022a6:	4586      	cmp	lr, r0
  4022a8:	d11d      	bne.n	4022e6 <strstr+0x1f6>
  4022aa:	3301      	adds	r3, #1
  4022ac:	429c      	cmp	r4, r3
  4022ae:	d1f6      	bne.n	40229e <strstr+0x1ae>
  4022b0:	f1b9 3fff 	cmp.w	r9, #4294967295
  4022b4:	d012      	beq.n	4022dc <strstr+0x1ec>
  4022b6:	eb05 0209 	add.w	r2, r5, r9
  4022ba:	f89a 3000 	ldrb.w	r3, [sl]
  4022be:	f81b 1002 	ldrb.w	r1, [fp, r2]
  4022c2:	4299      	cmp	r1, r3
  4022c4:	445a      	add	r2, fp
  4022c6:	d114      	bne.n	4022f2 <strstr+0x202>
  4022c8:	4653      	mov	r3, sl
  4022ca:	e005      	b.n	4022d8 <strstr+0x1e8>
  4022cc:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  4022d0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  4022d4:	4288      	cmp	r0, r1
  4022d6:	d10c      	bne.n	4022f2 <strstr+0x202>
  4022d8:	42b3      	cmp	r3, r6
  4022da:	d1f7      	bne.n	4022cc <strstr+0x1dc>
  4022dc:	465f      	mov	r7, fp
  4022de:	1978      	adds	r0, r7, r5
  4022e0:	b005      	add	sp, #20
  4022e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022e6:	f1c8 0201 	rsb	r2, r8, #1
  4022ea:	4415      	add	r5, r2
  4022ec:	441d      	add	r5, r3
  4022ee:	4638      	mov	r0, r7
  4022f0:	e7ba      	b.n	402268 <strstr+0x178>
  4022f2:	9b03      	ldr	r3, [sp, #12]
  4022f4:	4638      	mov	r0, r7
  4022f6:	441d      	add	r5, r3
  4022f8:	e7b6      	b.n	402268 <strstr+0x178>
  4022fa:	780b      	ldrb	r3, [r1, #0]
  4022fc:	b913      	cbnz	r3, 402304 <strstr+0x214>
  4022fe:	4770      	bx	lr
  402300:	4641      	mov	r1, r8
  402302:	e790      	b.n	402226 <strstr+0x136>
  402304:	2000      	movs	r0, #0
  402306:	4770      	bx	lr

00402308 <register_fini>:
  402308:	4b02      	ldr	r3, [pc, #8]	; (402314 <register_fini+0xc>)
  40230a:	b113      	cbz	r3, 402312 <register_fini+0xa>
  40230c:	4802      	ldr	r0, [pc, #8]	; (402318 <register_fini+0x10>)
  40230e:	f000 b805 	b.w	40231c <atexit>
  402312:	4770      	bx	lr
  402314:	00000000 	.word	0x00000000
  402318:	00402329 	.word	0x00402329

0040231c <atexit>:
  40231c:	2300      	movs	r3, #0
  40231e:	4601      	mov	r1, r0
  402320:	461a      	mov	r2, r3
  402322:	4618      	mov	r0, r3
  402324:	f000 b918 	b.w	402558 <__register_exitproc>

00402328 <__libc_fini_array>:
  402328:	b538      	push	{r3, r4, r5, lr}
  40232a:	4c0a      	ldr	r4, [pc, #40]	; (402354 <__libc_fini_array+0x2c>)
  40232c:	4d0a      	ldr	r5, [pc, #40]	; (402358 <__libc_fini_array+0x30>)
  40232e:	1b64      	subs	r4, r4, r5
  402330:	10a4      	asrs	r4, r4, #2
  402332:	d00a      	beq.n	40234a <__libc_fini_array+0x22>
  402334:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402338:	3b01      	subs	r3, #1
  40233a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40233e:	3c01      	subs	r4, #1
  402340:	f855 3904 	ldr.w	r3, [r5], #-4
  402344:	4798      	blx	r3
  402346:	2c00      	cmp	r4, #0
  402348:	d1f9      	bne.n	40233e <__libc_fini_array+0x16>
  40234a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40234e:	f000 b98f 	b.w	402670 <_fini>
  402352:	bf00      	nop
  402354:	00402680 	.word	0x00402680
  402358:	0040267c 	.word	0x0040267c

0040235c <__retarget_lock_acquire_recursive>:
  40235c:	4770      	bx	lr
  40235e:	bf00      	nop

00402360 <__retarget_lock_release_recursive>:
  402360:	4770      	bx	lr
  402362:	bf00      	nop
	...

00402370 <memchr>:
  402370:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402374:	2a10      	cmp	r2, #16
  402376:	db2b      	blt.n	4023d0 <memchr+0x60>
  402378:	f010 0f07 	tst.w	r0, #7
  40237c:	d008      	beq.n	402390 <memchr+0x20>
  40237e:	f810 3b01 	ldrb.w	r3, [r0], #1
  402382:	3a01      	subs	r2, #1
  402384:	428b      	cmp	r3, r1
  402386:	d02d      	beq.n	4023e4 <memchr+0x74>
  402388:	f010 0f07 	tst.w	r0, #7
  40238c:	b342      	cbz	r2, 4023e0 <memchr+0x70>
  40238e:	d1f6      	bne.n	40237e <memchr+0xe>
  402390:	b4f0      	push	{r4, r5, r6, r7}
  402392:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  402396:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40239a:	f022 0407 	bic.w	r4, r2, #7
  40239e:	f07f 0700 	mvns.w	r7, #0
  4023a2:	2300      	movs	r3, #0
  4023a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4023a8:	3c08      	subs	r4, #8
  4023aa:	ea85 0501 	eor.w	r5, r5, r1
  4023ae:	ea86 0601 	eor.w	r6, r6, r1
  4023b2:	fa85 f547 	uadd8	r5, r5, r7
  4023b6:	faa3 f587 	sel	r5, r3, r7
  4023ba:	fa86 f647 	uadd8	r6, r6, r7
  4023be:	faa5 f687 	sel	r6, r5, r7
  4023c2:	b98e      	cbnz	r6, 4023e8 <memchr+0x78>
  4023c4:	d1ee      	bne.n	4023a4 <memchr+0x34>
  4023c6:	bcf0      	pop	{r4, r5, r6, r7}
  4023c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4023cc:	f002 0207 	and.w	r2, r2, #7
  4023d0:	b132      	cbz	r2, 4023e0 <memchr+0x70>
  4023d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4023d6:	3a01      	subs	r2, #1
  4023d8:	ea83 0301 	eor.w	r3, r3, r1
  4023dc:	b113      	cbz	r3, 4023e4 <memchr+0x74>
  4023de:	d1f8      	bne.n	4023d2 <memchr+0x62>
  4023e0:	2000      	movs	r0, #0
  4023e2:	4770      	bx	lr
  4023e4:	3801      	subs	r0, #1
  4023e6:	4770      	bx	lr
  4023e8:	2d00      	cmp	r5, #0
  4023ea:	bf06      	itte	eq
  4023ec:	4635      	moveq	r5, r6
  4023ee:	3803      	subeq	r0, #3
  4023f0:	3807      	subne	r0, #7
  4023f2:	f015 0f01 	tst.w	r5, #1
  4023f6:	d107      	bne.n	402408 <memchr+0x98>
  4023f8:	3001      	adds	r0, #1
  4023fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4023fe:	bf02      	ittt	eq
  402400:	3001      	addeq	r0, #1
  402402:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402406:	3001      	addeq	r0, #1
  402408:	bcf0      	pop	{r4, r5, r6, r7}
  40240a:	3801      	subs	r0, #1
  40240c:	4770      	bx	lr
  40240e:	bf00      	nop

00402410 <memcmp>:
  402410:	2a03      	cmp	r2, #3
  402412:	b470      	push	{r4, r5, r6}
  402414:	d922      	bls.n	40245c <memcmp+0x4c>
  402416:	ea40 0301 	orr.w	r3, r0, r1
  40241a:	079b      	lsls	r3, r3, #30
  40241c:	d011      	beq.n	402442 <memcmp+0x32>
  40241e:	7803      	ldrb	r3, [r0, #0]
  402420:	780c      	ldrb	r4, [r1, #0]
  402422:	42a3      	cmp	r3, r4
  402424:	d11d      	bne.n	402462 <memcmp+0x52>
  402426:	440a      	add	r2, r1
  402428:	3101      	adds	r1, #1
  40242a:	e005      	b.n	402438 <memcmp+0x28>
  40242c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402430:	f811 4b01 	ldrb.w	r4, [r1], #1
  402434:	42a3      	cmp	r3, r4
  402436:	d114      	bne.n	402462 <memcmp+0x52>
  402438:	4291      	cmp	r1, r2
  40243a:	d1f7      	bne.n	40242c <memcmp+0x1c>
  40243c:	2000      	movs	r0, #0
  40243e:	bc70      	pop	{r4, r5, r6}
  402440:	4770      	bx	lr
  402442:	680d      	ldr	r5, [r1, #0]
  402444:	6806      	ldr	r6, [r0, #0]
  402446:	42ae      	cmp	r6, r5
  402448:	460c      	mov	r4, r1
  40244a:	4603      	mov	r3, r0
  40244c:	f101 0104 	add.w	r1, r1, #4
  402450:	f100 0004 	add.w	r0, r0, #4
  402454:	d108      	bne.n	402468 <memcmp+0x58>
  402456:	3a04      	subs	r2, #4
  402458:	2a03      	cmp	r2, #3
  40245a:	d8f2      	bhi.n	402442 <memcmp+0x32>
  40245c:	2a00      	cmp	r2, #0
  40245e:	d1de      	bne.n	40241e <memcmp+0xe>
  402460:	e7ec      	b.n	40243c <memcmp+0x2c>
  402462:	1b18      	subs	r0, r3, r4
  402464:	bc70      	pop	{r4, r5, r6}
  402466:	4770      	bx	lr
  402468:	4621      	mov	r1, r4
  40246a:	4618      	mov	r0, r3
  40246c:	e7d7      	b.n	40241e <memcmp+0xe>
  40246e:	bf00      	nop

00402470 <strchr>:
  402470:	b2c9      	uxtb	r1, r1
  402472:	2900      	cmp	r1, #0
  402474:	d041      	beq.n	4024fa <strchr+0x8a>
  402476:	0782      	lsls	r2, r0, #30
  402478:	b4f0      	push	{r4, r5, r6, r7}
  40247a:	d067      	beq.n	40254c <strchr+0xdc>
  40247c:	7803      	ldrb	r3, [r0, #0]
  40247e:	2b00      	cmp	r3, #0
  402480:	d068      	beq.n	402554 <strchr+0xe4>
  402482:	4299      	cmp	r1, r3
  402484:	d037      	beq.n	4024f6 <strchr+0x86>
  402486:	1c43      	adds	r3, r0, #1
  402488:	e004      	b.n	402494 <strchr+0x24>
  40248a:	f813 0b01 	ldrb.w	r0, [r3], #1
  40248e:	b390      	cbz	r0, 4024f6 <strchr+0x86>
  402490:	4281      	cmp	r1, r0
  402492:	d02f      	beq.n	4024f4 <strchr+0x84>
  402494:	079a      	lsls	r2, r3, #30
  402496:	461c      	mov	r4, r3
  402498:	d1f7      	bne.n	40248a <strchr+0x1a>
  40249a:	6825      	ldr	r5, [r4, #0]
  40249c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  4024a0:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  4024a4:	ea83 0605 	eor.w	r6, r3, r5
  4024a8:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  4024ac:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  4024b0:	ea20 0006 	bic.w	r0, r0, r6
  4024b4:	ea22 0205 	bic.w	r2, r2, r5
  4024b8:	4302      	orrs	r2, r0
  4024ba:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4024be:	d111      	bne.n	4024e4 <strchr+0x74>
  4024c0:	4620      	mov	r0, r4
  4024c2:	f850 6f04 	ldr.w	r6, [r0, #4]!
  4024c6:	ea83 0706 	eor.w	r7, r3, r6
  4024ca:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  4024ce:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  4024d2:	ea25 0507 	bic.w	r5, r5, r7
  4024d6:	ea22 0206 	bic.w	r2, r2, r6
  4024da:	432a      	orrs	r2, r5
  4024dc:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4024e0:	d0ef      	beq.n	4024c2 <strchr+0x52>
  4024e2:	4604      	mov	r4, r0
  4024e4:	7820      	ldrb	r0, [r4, #0]
  4024e6:	b918      	cbnz	r0, 4024f0 <strchr+0x80>
  4024e8:	e005      	b.n	4024f6 <strchr+0x86>
  4024ea:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  4024ee:	b110      	cbz	r0, 4024f6 <strchr+0x86>
  4024f0:	4281      	cmp	r1, r0
  4024f2:	d1fa      	bne.n	4024ea <strchr+0x7a>
  4024f4:	4620      	mov	r0, r4
  4024f6:	bcf0      	pop	{r4, r5, r6, r7}
  4024f8:	4770      	bx	lr
  4024fa:	0783      	lsls	r3, r0, #30
  4024fc:	d024      	beq.n	402548 <strchr+0xd8>
  4024fe:	7803      	ldrb	r3, [r0, #0]
  402500:	2b00      	cmp	r3, #0
  402502:	d0f9      	beq.n	4024f8 <strchr+0x88>
  402504:	1c43      	adds	r3, r0, #1
  402506:	e003      	b.n	402510 <strchr+0xa0>
  402508:	7802      	ldrb	r2, [r0, #0]
  40250a:	3301      	adds	r3, #1
  40250c:	2a00      	cmp	r2, #0
  40250e:	d0f3      	beq.n	4024f8 <strchr+0x88>
  402510:	0799      	lsls	r1, r3, #30
  402512:	4618      	mov	r0, r3
  402514:	d1f8      	bne.n	402508 <strchr+0x98>
  402516:	6819      	ldr	r1, [r3, #0]
  402518:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40251c:	ea22 0201 	bic.w	r2, r2, r1
  402520:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402524:	d108      	bne.n	402538 <strchr+0xc8>
  402526:	f853 1f04 	ldr.w	r1, [r3, #4]!
  40252a:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  40252e:	ea22 0201 	bic.w	r2, r2, r1
  402532:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402536:	d0f6      	beq.n	402526 <strchr+0xb6>
  402538:	781a      	ldrb	r2, [r3, #0]
  40253a:	4618      	mov	r0, r3
  40253c:	b142      	cbz	r2, 402550 <strchr+0xe0>
  40253e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  402542:	2b00      	cmp	r3, #0
  402544:	d1fb      	bne.n	40253e <strchr+0xce>
  402546:	4770      	bx	lr
  402548:	4603      	mov	r3, r0
  40254a:	e7e4      	b.n	402516 <strchr+0xa6>
  40254c:	4604      	mov	r4, r0
  40254e:	e7a4      	b.n	40249a <strchr+0x2a>
  402550:	4618      	mov	r0, r3
  402552:	4770      	bx	lr
  402554:	4618      	mov	r0, r3
  402556:	e7ce      	b.n	4024f6 <strchr+0x86>

00402558 <__register_exitproc>:
  402558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40255c:	4d2c      	ldr	r5, [pc, #176]	; (402610 <__register_exitproc+0xb8>)
  40255e:	4606      	mov	r6, r0
  402560:	6828      	ldr	r0, [r5, #0]
  402562:	4698      	mov	r8, r3
  402564:	460f      	mov	r7, r1
  402566:	4691      	mov	r9, r2
  402568:	f7ff fef8 	bl	40235c <__retarget_lock_acquire_recursive>
  40256c:	4b29      	ldr	r3, [pc, #164]	; (402614 <__register_exitproc+0xbc>)
  40256e:	681c      	ldr	r4, [r3, #0]
  402570:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402574:	2b00      	cmp	r3, #0
  402576:	d03e      	beq.n	4025f6 <__register_exitproc+0x9e>
  402578:	685a      	ldr	r2, [r3, #4]
  40257a:	2a1f      	cmp	r2, #31
  40257c:	dc1c      	bgt.n	4025b8 <__register_exitproc+0x60>
  40257e:	f102 0e01 	add.w	lr, r2, #1
  402582:	b176      	cbz	r6, 4025a2 <__register_exitproc+0x4a>
  402584:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402588:	2401      	movs	r4, #1
  40258a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40258e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402592:	4094      	lsls	r4, r2
  402594:	4320      	orrs	r0, r4
  402596:	2e02      	cmp	r6, #2
  402598:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40259c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4025a0:	d023      	beq.n	4025ea <__register_exitproc+0x92>
  4025a2:	3202      	adds	r2, #2
  4025a4:	f8c3 e004 	str.w	lr, [r3, #4]
  4025a8:	6828      	ldr	r0, [r5, #0]
  4025aa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4025ae:	f7ff fed7 	bl	402360 <__retarget_lock_release_recursive>
  4025b2:	2000      	movs	r0, #0
  4025b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4025b8:	4b17      	ldr	r3, [pc, #92]	; (402618 <__register_exitproc+0xc0>)
  4025ba:	b30b      	cbz	r3, 402600 <__register_exitproc+0xa8>
  4025bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4025c0:	f3af 8000 	nop.w
  4025c4:	4603      	mov	r3, r0
  4025c6:	b1d8      	cbz	r0, 402600 <__register_exitproc+0xa8>
  4025c8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4025cc:	6002      	str	r2, [r0, #0]
  4025ce:	2100      	movs	r1, #0
  4025d0:	6041      	str	r1, [r0, #4]
  4025d2:	460a      	mov	r2, r1
  4025d4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4025d8:	f04f 0e01 	mov.w	lr, #1
  4025dc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4025e0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4025e4:	2e00      	cmp	r6, #0
  4025e6:	d0dc      	beq.n	4025a2 <__register_exitproc+0x4a>
  4025e8:	e7cc      	b.n	402584 <__register_exitproc+0x2c>
  4025ea:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4025ee:	430c      	orrs	r4, r1
  4025f0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4025f4:	e7d5      	b.n	4025a2 <__register_exitproc+0x4a>
  4025f6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4025fa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4025fe:	e7bb      	b.n	402578 <__register_exitproc+0x20>
  402600:	6828      	ldr	r0, [r5, #0]
  402602:	f7ff fead 	bl	402360 <__retarget_lock_release_recursive>
  402606:	f04f 30ff 	mov.w	r0, #4294967295
  40260a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40260e:	bf00      	nop
  402610:	20000438 	.word	0x20000438
  402614:	00402658 	.word	0x00402658
  402618:	00000000 	.word	0x00000000
  40261c:	43435553 	.word	0x43435553
  402620:	00535345 	.word	0x00535345
  402624:	0001c200 	.word	0x0001c200
  402628:	000000c0 	.word	0x000000c0
  40262c:	00000800 	.word	0x00000800
	...
  40263c:	20746573 	.word	0x20746573
  402640:	6d6d6f63 	.word	0x6d6d6f63
  402644:	6970675f 	.word	0x6970675f
  402648:	3132206f 	.word	0x3132206f
  40264c:	00000a0d 	.word	0x00000a0d
  402650:	74736574 	.word	0x74736574
  402654:	00000a0d 	.word	0x00000a0d

00402658 <_global_impure_ptr>:
  402658:	20000010                                ... 

0040265c <_init>:
  40265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40265e:	bf00      	nop
  402660:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402662:	bc08      	pop	{r3}
  402664:	469e      	mov	lr, r3
  402666:	4770      	bx	lr

00402668 <__init_array_start>:
  402668:	00402309 	.word	0x00402309

0040266c <__frame_dummy_init_array_entry>:
  40266c:	004000f1                                ..@.

00402670 <_fini>:
  402670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402672:	bf00      	nop
  402674:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402676:	bc08      	pop	{r3}
  402678:	469e      	mov	lr, r3
  40267a:	4770      	bx	lr

0040267c <__fini_array_start>:
  40267c:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	08d4 2000                                   ... 
